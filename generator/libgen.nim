import xmltree
import strformat
import strutils
import sequtils
import tables
import logging
import options
import os

import ./utils
import ./nodedefs
import ./liblogger
import ./extraction
import ./rendering
import ./libfiles
import ./structuredstring


# let logger = newMyLogger(open("log", fmWrite), fmtStr="[$time] - \x1b[32m$levelname\x1b[0m ")
let logger = newMyLogger(open("log", fmWrite), fmtStr="[$time] - $levelname ".fmt)
addHandler(logger)

const libRoot = "src/vulkan"

let
  xml = getVulkanXML()
  resources = xml.extractResources

const warningText = """
# This file is generated by the program.
# Note that any changes to this file will be reset by the execution of
# the generated program.
"""

let components = newTable [
  ("android", @[
    "VK_ANDROID_external_memory_android_hardware_buffer",
    "VK_ANDROID_native_buffer",
    "VK_KHR_android_surface"]),
  ("wayland", @[
    "VK_KHR_wayland_surface"]),
  ("win32", @[
    "VK_KHR_win32_surface"]),
  ("xcb", @[
    "VK_KHR_xcb_surface"]),
  ("xlib", @[
    "VK_KHR_xlib_surface"]),
  ("ios", @[
    "VK_MVK_ios_surface"]),
  ("macos", @[
    "VK_MVK_macos_surface"]),
  ("vi", @[
    "VK_NN_vi_surface"]),
  ("mir", @[
    "VK_KHR_mir_surface"]),
  ("ggp", @[
    "VK_GGP_stream_descriptor_surface"]),
  ("directfb", @[
    "VK_EXT_directfb_surface"]),
  ("metal", @[
    "VK_EXT_metal_surface"]),
  ("fuchsia", @[
    "VK_FUCHSIA_imagepipe_surface"]),
]


proc genBaseTypes*() =
  let file = open("src/vulkan/basetypes.nim", fmWrite)
  defer: close file
  file.write warningText
  file.write "type\n"
  for key, val in resources.basetypes:
    case val.kind
    of nkbExternal: discard
    of nkbNormal:
      file.write "  "
      file.write val.render
      file.write "\n"

  file.write "\n"

  var consts = sstring(kind: skBlock, title: "const")
  consts.add %"# == Constants == #"
  for key, val in resources.consts      : consts.add %val.render()
  consts.add %"# == Aliases == #"
  for key, val in resources.constAliases: consts.add %val.render()
  file.write $consts

proc genHandles* =
  block HandleTypes:
    let file = open("src/vulkan/handles/handleTypes.nim", fmWrite)
    defer: close file
    file.write warningText

    var handleTypes = sstring(kind: skBlock, title: "type HandleTypes* = enum")
    handleTypes.add %"HtNil"
    for key, val in resources.handles:
      let str = val.renderHandleType()
      handleTypes.add str
    file.write $handleTypes

  block Handles:
    let file = open("src/vulkan/handles/handleConcretes.nim", fmWrite)
    defer: close file
    file.write warningText

    file.write """
import handleTypes
import handleOperations

"""

    var handles = sstring(kind: skBlock, title: "type")
    for key, val in resources.handles: handles.add %val.render()

    file.write $handles

proc genEnums*() =
  var rendered: seq[string]

  template openFile(filePath: string) =
    let file {.inject.} = filePath.open(fmWrite)
    defer: close file
    file.write warningText


  proc renderComponent(feature: XmlNode, enumAliases: TableRef[string, NodeEnumAliases], rendered: var seq[string]): Option[sstring] =
    var res = sstring(kind: skBlock)
    for requiresXml in feature.findAll("require"):
      for req in requiresXml.extractNodeRequire.targets:
        if req.name in rendered: continue
        case req.kind

        of nkrType:
          if resources.enums.haskey(req.name):
            res.add render( resources.enums[req.name], resources.vendorTags )
          elif resources.bitmasks.hasKey(req.name):
            res.add render( resources.bitmasks[req.name] )
          if resources.enumAliases.hasKey(req.name):
            enumAliases[req.name] = resources.enumAliases[req.name]
          rendered.add req.name

        of nkrEnumExtendAlias:
          if enumAliases.hasKey(req.extends):
            enumAliases[req.extends].aliases.add NodeEnumAlias(
              name: req.name,
              alias: req.enumAlias,
            )
          else:
            enumAliases[req.extends] = NodeEnumAliases(
              name: req.extends,
              aliases: @[NodeEnumAlias(
                name: req.name,
                alias: req.enumAlias,
              )]
            )

        else: discard

    if res.sons.len > 0:
      res.sons.insert( %feature{"name"}
        .removeVkPrefix
        .replace("_", " ")
        .underline('-')
        .commentify,
        0)
      return some res
    return none sstring

  block:
    openFile( "src/vulkan/enums.nim" )
    file.write """

import utils/enumutilities
import basetypes

"""
    var enumAliases = newTable[string, NodeEnumAliases]()
    var results = sstring(kind: skBlock, title: "type")
    for x in xml.findAll("feature"):
      results.add renderComponent(x, enumAliases, rendered)
    for x in xml.findAll("extensions"):
      results.add renderComponent(x, enumAliases, rendered)
    
    file.write results
    file.write "\n\n\n"

    results = sstring(kind: skBlock)
    for key, val in enumAliases:
      results.add val.render(resources.vendorTags)

    file.write $results

proc isValidExtension(name: string): bool =
  let words = name.parseWords({'_'})
  if words.len >= 1 and words[1] == "RESERVED": return false

  if words.len == 4 and words[2] == "extension":
    try:
      discard words[3].parseInt
      return false
    except: discard

  return true

proc generate*() =
  var features = new TableRef[string, Feature]
  var libfiles: seq[LibFile]

  let
    platformFile = LibFile(path: "platform", dummy: true)
    platformFeature = Feature(name: "platform")
  platformFeature.affiliate platformFile
  features["platform"] = platformFeature

  # = VULKAN FEATURES =

  for featureXML in xml.findAll("feature"):

    let
      comment = featureXML{"comment"}
      name = featureXML{"name"}

    var feature = Feature(name: name)
    features[name] = feature

    if (?comment).isSome:
      feature.header = some comment.underline('=').commentify

    for require in featureXML.findAll("require"):
      feature.requires.add require.extractNodeRequire

    var file = new LibFile
    libfiles.add file

    feature.affiliate file
    feature.imports.add platformFeature.name
    case feature.name
    of "VK_VERSION_1_0":
      file.path = "features/vk10"
    of "VK_VERSION_1_1":
      file.path = "features/vk11"
      feature.imports.add "VK_VERSION_1_0"
    of "VK_VERSION_1_2":
      file.path = "features/vk12"
      feature.imports.add "VK_VERSION_1_1"
    else: discard

  # = VULKAN EXTENSIONS =

  when true:
    let customVersion = [
      ("VK_ANDROID_external_memory_android_hardware_buffer", @["VK_VERSION_1_0", "VK_VERSION_1_1"]),
      ("VK_EXT_external_memory_host",                        @["VK_VERSION_1_0", "VK_VERSION_1_1"]),
      ("VK_KHR_push_descriptor",                             @["VK_VERSION_1_0", "VK_VERSION_1_1"]),
      ("VK_KHR_ray_tracing",                                 @["VK_VERSION_1_0", "VK_VERSION_1_1"]),
      ("VK_KHR_external_memory_win32",                       @["VK_VERSION_1_0", "VK_VERSION_1_1"]),
      ("VK_KHR_external_semaphore_fd",                       @["VK_VERSION_1_0", "VK_VERSION_1_1"]),
      ("VK_KHR_external_semaphore_win32",                    @["VK_VERSION_1_0", "VK_VERSION_1_1"]),
      ("VK_NV_device_generated_commands",                    @["VK_VERSION_1_0", "VK_VERSION_1_1"]),
      ("VK_EXT_buffer_device_address",                       @["VK_VERSION_1_0", "VK_VERSION_1_1", "VK_VERSION_1_2"]),
      ("VK_KHR_ray_tracing",                                 @["VK_VERSION_1_0", "VK_EXT_debug_report"])
    ].newTable
    for extension in xml["extensions"].findAll("extension"):
      let name = extension{"name"}
      if not name.isValidExtension: continue

      var feature = Feature(name: name)

      let needsImport = extension{"requires"}.parseWords({','})
      let promotedto = ?extension{"promotedto"}

      if customVersion.hasKey(feature.name):
        feature.imports.add customVersion[feature.name]
      else: feature.imports.add "VK_VERSION_1_0"
      feature.imports.add needsImport
      if promotedto.isSome:
        feature.imports.add promotedto.get

      if (?extension.comment).isSome:
        feature.header = some extension.comment.underline('=').commentify

      feature.imports.add platformFeature.name

      for require in extension.findAll("require"):
        if (?require{"extension"}).isSome:
          feature.imports.add require{"extension"}
        feature.requires.add require.extractNodeRequire

      if feature.requires.len != 0:
        features[name] = feature

      # MAKE FILE
      var file = new LibFile
      file.path = "extensions"/feature.name
      
      feature.affiliate file
      libfiles.add file


  # = MERGE AND RENDER =
  let fileGroup = [
    ("VK_KHR_surface", @["VK_KHR_display", #["VK_KHR_swapchain"]#]),
    ("VK_KHR_draw_indirect_count", @["VK_AMD_draw_indirect_count",]),
    ("VK_KHR_ray_tracing", @["VK_NV_ray_tracing",]),
  ].newTable

  # for fileName, mergeMaterials in fileGroup:
  #   library.merge(fileName, mergeMaterials)

  var updatedFiles: seq[string]
  for libFile in libfiles:
    if libFile.isNil: continue
    let
      res = libFile.render(features, resources)
      filePath = &"{libRoot/libFile.path}.nim"
    if res.isNone: continue
    if res.get.isChanged(filePath):
      filePath.writeFile res.get
      updatedFiles.add filePath

  if updatedFiles.len == 0:
    notice title"Generate Complate! No API files have been updated."
  else:
    notice title"Generate Complate! Following API files have been updated:":
      updatedFiles.join("\n").indent(2)

when isMainModule:
  generate()
  genBaseTypes()
  genHandles()
  genEnums()