# This file is generated by the program.
# Note that any changes to this file will be reset by the execution of
# the generated program.

# VK_EXT_debug_utils

import ../tools
const
  # VK_EXT_debug_utils
  ExtDebugUtilsSpecVersion* = 2
  ExtDebugUtilsExtensionName* = "VK_EXT_debug_utils"


# VK_EXT_debug_utils
# ==================
proc setDebugUtilsObjectNameEXT*(
      device: Device;
      pNameInfo: ptr DebugUtilsObjectNameInfoEXT;
    ): Result {.cdecl,
      successCodes: @[Result.success],
      errorCodes: @[Result.errorOutOfHostMemory, Result.errorOutOfDeviceMemory],
      lazyload("vkSetDebugUtilsObjectNameEXT", DeviceLevel).}
proc setDebugUtilsObjectTagEXT*(
      device: Device;
      pTagInfo: ptr DebugUtilsObjectTagInfoEXT;
    ): Result {.cdecl,
      successCodes: @[Result.success],
      errorCodes: @[Result.errorOutOfHostMemory, Result.errorOutOfDeviceMemory],
      lazyload("vkSetDebugUtilsObjectTagEXT", DeviceLevel).}
proc queueBeginDebugUtilsLabelEXT*(
      queue: Queue;
      pLabelInfo: ptr DebugUtilsLabelEXT;
    ): void {.cdecl, lazyload("vkQueueBeginDebugUtilsLabelEXT", DeviceLevel).}
proc queueEndDebugUtilsLabelEXT*(
      queue: Queue;
    ): void {.cdecl, lazyload("vkQueueEndDebugUtilsLabelEXT", DeviceLevel).}
proc queueInsertDebugUtilsLabelEXT*(
      queue: Queue;
      pLabelInfo: ptr DebugUtilsLabelEXT;
    ): void {.cdecl, lazyload("vkQueueInsertDebugUtilsLabelEXT", DeviceLevel).}
proc cmdBeginDebugUtilsLabelEXT*(
      commandBuffer: CommandBuffer;
      pLabelInfo: ptr DebugUtilsLabelEXT;
    ): void {.cdecl, lazyload("vkCmdBeginDebugUtilsLabelEXT", DeviceLevel).}
proc cmdEndDebugUtilsLabelEXT*(
      commandBuffer: CommandBuffer;
    ): void {.cdecl, lazyload("vkCmdEndDebugUtilsLabelEXT", DeviceLevel).}
proc cmdInsertDebugUtilsLabelEXT*(
      commandBuffer: CommandBuffer;
      pLabelInfo: ptr DebugUtilsLabelEXT;
    ): void {.cdecl, lazyload("vkCmdInsertDebugUtilsLabelEXT", DeviceLevel).}
proc createDebugUtilsMessengerEXT*(
      instance: Instance;
      pCreateInfo: ptr DebugUtilsMessengerCreateInfoEXT;
      pAllocator = default(ptr AllocationCallbacks);
      pMessenger: ptr DebugUtilsMessengerEXT;
    ): Result {.cdecl,
      successCodes: @[Result.success],
      errorCodes: @[Result.errorOutOfHostMemory],
      lazyload("vkCreateDebugUtilsMessengerEXT", InstanceLevel).}
proc destroyDebugUtilsMessengerEXT*(
      instance: Instance;
      messenger = default(DebugUtilsMessengerEXT);
      pAllocator = default(ptr AllocationCallbacks);
    ): void {.cdecl, lazyload("vkDestroyDebugUtilsMessengerEXT", InstanceLevel).}
proc submitDebugUtilsMessageEXT*(
      instance: Instance;
      messageSeverity: DebugUtilsMessageSeverityFlagBitsEXT;
      messageTypes: DebugUtilsMessageTypeFlagsEXT;
      pCallbackData: ptr DebugUtilsMessengerCallbackDataEXT;
    ): void {.cdecl, lazyload("vkSubmitDebugUtilsMessageEXT", InstanceLevel).}


proc loadAllVK_EXT_debug_utils*(instance: Instance) = instance.loadCommands:
  setDebugUtilsObjectNameEXT
  setDebugUtilsObjectTagEXT
  queueBeginDebugUtilsLabelEXT
  queueEndDebugUtilsLabelEXT
  queueInsertDebugUtilsLabelEXT
  cmdBeginDebugUtilsLabelEXT
  cmdEndDebugUtilsLabelEXT
  cmdInsertDebugUtilsLabelEXT
  createDebugUtilsMessengerEXT
  destroyDebugUtilsMessengerEXT
  submitDebugUtilsMessageEXT
proc loadVK_EXT_debug_utils*(instance: Instance) = instance.loadCommands:
  createDebugUtilsMessengerEXT
  destroyDebugUtilsMessengerEXT
  submitDebugUtilsMessageEXT
proc loadVK_EXT_debug_utils*(device: Device) = device.loadCommands:
  setDebugUtilsObjectNameEXT
  setDebugUtilsObjectTagEXT
  queueBeginDebugUtilsLabelEXT
  queueEndDebugUtilsLabelEXT
  queueInsertDebugUtilsLabelEXT
  cmdBeginDebugUtilsLabelEXT
  cmdEndDebugUtilsLabelEXT
  cmdInsertDebugUtilsLabelEXT