# This file is generated by the program.
# Note that any changes to this file will be reset by the execution of
# the generated program.

# VK_KHR_acceleration_structure

import ../tools
const
  # VK_KHR_acceleration_structure
  KhrAccelerationStructureSpecVersion* = 13
  KhrAccelerationStructureExtensionName* = "VK_KHR_acceleration_structure"


# VK_KHR_acceleration_structure
# =============================
proc createAccelerationStructureKHR*(
      device: Device;
      pCreateInfo: ptr AccelerationStructureCreateInfoKHR;
      pAllocator = default(ptr AllocationCallbacks);
      pAccelerationStructure: ptr AccelerationStructureKHR;
    ): Result {.lazyload("vkCreateAccelerationStructureKHR", DeviceLevel),
      successCodes: @[Result.success],
      errorCodes: @[Result.errorOutOfHostMemory, Result.errorInvalidOpaqueCaptureAddressKhr].}
proc destroyAccelerationStructureKHR*(
      device: Device;
      accelerationStructure = default(AccelerationStructureKHR);
      pAllocator = default(ptr AllocationCallbacks);
    ): void {.lazyload("vkDestroyAccelerationStructureKHR", DeviceLevel).}
proc cmdBuildAccelerationStructuresKHR*(
      commandBuffer: CommandBuffer;
      infoCount: uint32;
      pInfos {.length: infoCount.}: arrPtr[AccelerationStructureBuildGeometryInfoKHR];
      ppBuildRangeInfos {.length: infoCount.}: arrPtr[arrPtr[AccelerationStructureBuildRangeInfoKHR]];
    ): void {.lazyload("vkCmdBuildAccelerationStructuresKHR", DeviceLevel),
      queues: QueueFlags{compute}, cmdchain.}
proc cmdBuildAccelerationStructuresIndirectKHR*(
      commandBuffer: CommandBuffer;
      infoCount: uint32;
      pInfos {.length: infoCount.}: arrPtr[AccelerationStructureBuildGeometryInfoKHR];
      pIndirectDeviceAddresses {.length: infoCount.}: arrPtr[DeviceAddress];
      pIndirectStrides {.length: infoCount.}: arrPtr[uint32];
      ppMaxPrimitiveCounts {.length: infoCount.}: arrPtr[arrPtr[uint32]];
    ): void {.lazyload("vkCmdBuildAccelerationStructuresIndirectKHR", DeviceLevel),
      queues: QueueFlags{compute}, cmdchain.}
proc buildAccelerationStructuresKHR*(
      device: Device;
      deferredOperation = default(DeferredOperationKHR);
      infoCount: uint32;
      pInfos {.length: infoCount.}: arrPtr[AccelerationStructureBuildGeometryInfoKHR];
      ppBuildRangeInfos {.length: infoCount.}: arrPtr[arrPtr[AccelerationStructureBuildRangeInfoKHR]];
    ): Result {.lazyload("vkBuildAccelerationStructuresKHR", DeviceLevel),
      successCodes: @[Result.success, Result.operationDeferredKhr, Result.operationNotDeferredKhr],
      errorCodes: @[Result.errorOutOfHostMemory, Result.errorOutOfDeviceMemory].}
proc copyAccelerationStructureKHR*(
      device: Device;
      deferredOperation = default(DeferredOperationKHR);
      pInfo: ptr CopyAccelerationStructureInfoKHR;
    ): Result {.lazyload("vkCopyAccelerationStructureKHR", DeviceLevel),
      successCodes: @[Result.success, Result.operationDeferredKhr, Result.operationNotDeferredKhr],
      errorCodes: @[Result.errorOutOfHostMemory, Result.errorOutOfDeviceMemory].}
proc copyAccelerationStructureToMemoryKHR*(
      device: Device;
      deferredOperation = default(DeferredOperationKHR);
      pInfo: ptr CopyAccelerationStructureToMemoryInfoKHR;
    ): Result {.lazyload("vkCopyAccelerationStructureToMemoryKHR", DeviceLevel),
      successCodes: @[Result.success, Result.operationDeferredKhr, Result.operationNotDeferredKhr],
      errorCodes: @[Result.errorOutOfHostMemory, Result.errorOutOfDeviceMemory].}
proc copyMemoryToAccelerationStructureKHR*(
      device: Device;
      deferredOperation = default(DeferredOperationKHR);
      pInfo: ptr CopyMemoryToAccelerationStructureInfoKHR;
    ): Result {.lazyload("vkCopyMemoryToAccelerationStructureKHR", DeviceLevel),
      successCodes: @[Result.success, Result.operationDeferredKhr, Result.operationNotDeferredKhr],
      errorCodes: @[Result.errorOutOfHostMemory, Result.errorOutOfDeviceMemory].}
proc writeAccelerationStructuresPropertiesKHR*(
      device: Device;
      accelerationStructureCount: uint32;
      pAccelerationStructures {.length: accelerationStructureCount.}: arrPtr[AccelerationStructureKHR];
      queryType: QueryType;
      dataSize: uint;
      pData {.length: dataSize.}: pointer;
      stride: uint;
    ): Result {.lazyload("vkWriteAccelerationStructuresPropertiesKHR", DeviceLevel),
      successCodes: @[Result.success],
      errorCodes: @[Result.errorOutOfHostMemory, Result.errorOutOfDeviceMemory].}
proc cmdCopyAccelerationStructureKHR*(
      commandBuffer: CommandBuffer;
      pInfo: ptr CopyAccelerationStructureInfoKHR;
    ): void {.lazyload("vkCmdCopyAccelerationStructureKHR", DeviceLevel),
      queues: QueueFlags{compute}, cmdchain.}
proc cmdCopyAccelerationStructureToMemoryKHR*(
      commandBuffer: CommandBuffer;
      pInfo: ptr CopyAccelerationStructureToMemoryInfoKHR;
    ): void {.lazyload("vkCmdCopyAccelerationStructureToMemoryKHR", DeviceLevel),
      queues: QueueFlags{compute}, cmdchain.}
proc cmdCopyMemoryToAccelerationStructureKHR*(
      commandBuffer: CommandBuffer;
      pInfo: ptr CopyMemoryToAccelerationStructureInfoKHR;
    ): void {.lazyload("vkCmdCopyMemoryToAccelerationStructureKHR", DeviceLevel),
      queues: QueueFlags{compute}, cmdchain.}
proc getAccelerationStructureDeviceAddressKHR*(
      device: Device;
      pInfo: ptr AccelerationStructureDeviceAddressInfoKHR;
    ): DeviceAddress {.lazyload("vkGetAccelerationStructureDeviceAddressKHR", DeviceLevel).}
proc cmdWriteAccelerationStructuresPropertiesKHR*(
      commandBuffer: CommandBuffer;
      accelerationStructureCount: uint32;
      pAccelerationStructures {.length: accelerationStructureCount.}: arrPtr[AccelerationStructureKHR];
      queryType: QueryType;
      queryPool: QueryPool;
      firstQuery: uint32;
    ): void {.lazyload("vkCmdWriteAccelerationStructuresPropertiesKHR", DeviceLevel),
      queues: QueueFlags{compute}, cmdchain.}
proc getDeviceAccelerationStructureCompatibilityKHR*(
      device: Device;
      pVersionInfo: ptr AccelerationStructureVersionInfoKHR;
      pCompatibility: ptr AccelerationStructureCompatibilityKHR;
    ): void {.lazyload("vkGetDeviceAccelerationStructureCompatibilityKHR", DeviceLevel).}
proc getAccelerationStructureBuildSizesKHR*(
      device: Device;
      buildType: AccelerationStructureBuildTypeKHR;
      pBuildInfo: ptr AccelerationStructureBuildGeometryInfoKHR;
      pMaxPrimitiveCounts {.length: pBuildInfo.geometryCount.} = default(arrPtr[uint32]);
      pSizeInfo: ptr AccelerationStructureBuildSizesInfoKHR;
    ): void {.lazyload("vkGetAccelerationStructureBuildSizesKHR", DeviceLevel).}


proc loadAllVK_KHR_acceleration_structure*(instance: Instance) = instance.loadCommands:
  createAccelerationStructureKHR
  destroyAccelerationStructureKHR
  cmdBuildAccelerationStructuresKHR
  cmdBuildAccelerationStructuresIndirectKHR
  buildAccelerationStructuresKHR
  copyAccelerationStructureKHR
  copyAccelerationStructureToMemoryKHR
  copyMemoryToAccelerationStructureKHR
  writeAccelerationStructuresPropertiesKHR
  cmdCopyAccelerationStructureKHR
  cmdCopyAccelerationStructureToMemoryKHR
  cmdCopyMemoryToAccelerationStructureKHR
  getAccelerationStructureDeviceAddressKHR
  cmdWriteAccelerationStructuresPropertiesKHR
  getDeviceAccelerationStructureCompatibilityKHR
  getAccelerationStructureBuildSizesKHR
proc loadVK_KHR_acceleration_structure*(device: Device) = device.loadCommands:
  createAccelerationStructureKHR
  destroyAccelerationStructureKHR
  cmdBuildAccelerationStructuresKHR
  cmdBuildAccelerationStructuresIndirectKHR
  buildAccelerationStructuresKHR
  copyAccelerationStructureKHR
  copyAccelerationStructureToMemoryKHR
  copyMemoryToAccelerationStructureKHR
  writeAccelerationStructuresPropertiesKHR
  cmdCopyAccelerationStructureKHR
  cmdCopyAccelerationStructureToMemoryKHR
  cmdCopyMemoryToAccelerationStructureKHR
  getAccelerationStructureDeviceAddressKHR
  cmdWriteAccelerationStructuresPropertiesKHR
  getDeviceAccelerationStructureCompatibilityKHR
  getAccelerationStructureBuildSizesKHR