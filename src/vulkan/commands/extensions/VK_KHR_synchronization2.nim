# This file is generated by the program.
# Note that any changes to this file will be reset by the execution of
# the generated program.

# VK_KHR_synchronization2

import ../tools
const
  # VK_KHR_synchronization2
  KhrSynchronization2SpecVersion* = 1
  KhrSynchronization2ExtensionName* = "VK_KHR_synchronization2"
  PipelineStageNoneKhr* = 0
  AccessNoneKhr* = 0


# VK_KHR_synchronization2
# =======================
proc cmdSetEvent2KHR*(
      commandBuffer: CommandBuffer;
      event: Event;
      pDependencyInfo: ptr DependencyInfoKHR;
    ): void {.lazyload("vkCmdSetEvent2KHR", DeviceLevel),
      queues: QueueFlags{graphics, compute}, cmdchain.}
proc cmdResetEvent2KHR*(
      commandBuffer: CommandBuffer;
      event: Event;
      stageMask = default(PipelineStageFlags2KHR);
    ): void {.lazyload("vkCmdResetEvent2KHR", DeviceLevel),
      queues: QueueFlags{graphics, compute}, cmdchain.}
proc cmdWaitEvents2KHR*(
      commandBuffer: CommandBuffer;
      eventCount: uint32;
      pEvents {.length: eventCount.}: arrPtr[Event];
      pDependencyInfos {.length: eventCount.}: arrPtr[DependencyInfoKHR];
    ): void {.lazyload("vkCmdWaitEvents2KHR", DeviceLevel),
      queues: QueueFlags{graphics, compute}, cmdchain.}
proc cmdPipelineBarrier2KHR*(
      commandBuffer: CommandBuffer;
      pDependencyInfo: ptr DependencyInfoKHR;
    ): void {.lazyload("vkCmdPipelineBarrier2KHR", DeviceLevel),
      queues: QueueFlags{transfer, graphics, compute}, cmdchain.}
proc cmdWriteTimestamp2KHR*(
      commandBuffer: CommandBuffer;
      stage = default(PipelineStageFlags2KHR);
      queryPool: QueryPool;
      query: uint32;
    ): void {.lazyload("vkCmdWriteTimestamp2KHR", DeviceLevel),
      queues: QueueFlags{transfer, graphics, compute, decode, encode}, cmdchain.}
proc queueSubmit2KHR*(
      queue: Queue;
      submitCount = default(uint32);
      pSubmits {.length: submitCount.}: arrPtr[SubmitInfo2KHR];
      fence = default(Fence);
    ): Result {.lazyload("vkQueueSubmit2KHR", DeviceLevel),
      successCodes: @[Result.success],
      errorCodes: @[Result.errorOutOfHostMemory, Result.errorOutOfDeviceMemory, Result.errorDeviceLost].}
proc cmdWriteBufferMarker2AMD*(
      commandBuffer: CommandBuffer;
      stage = default(PipelineStageFlags2KHR);
      dstBuffer: Buffer;
      dstOffset: DeviceSize;
      marker: uint32;
    ): void {.lazyload("vkCmdWriteBufferMarker2AMD", DeviceLevel),
      queues: QueueFlags{transfer, graphics, compute}, cmdchain.}
proc getQueueCheckpointData2NV*(
      queue: Queue;
      pCheckpointDataCount: ptr uint32;
      pCheckpointData {.length: pCheckpointDataCount.} = default(arrPtr[CheckpointData2NV]);
    ): void {.lazyload("vkGetQueueCheckpointData2NV", DeviceLevel).}


proc loadAllVK_KHR_synchronization2*(instance: Instance) = instance.loadCommands:
  cmdSetEvent2KHR
  cmdResetEvent2KHR
  cmdWaitEvents2KHR
  cmdPipelineBarrier2KHR
  cmdWriteTimestamp2KHR
  queueSubmit2KHR
  cmdWriteBufferMarker2AMD
  getQueueCheckpointData2NV
proc loadVK_KHR_synchronization2*(device: Device) = device.loadCommands:
  cmdSetEvent2KHR
  cmdResetEvent2KHR
  cmdWaitEvents2KHR
  cmdPipelineBarrier2KHR
  cmdWriteTimestamp2KHR
  queueSubmit2KHR
  cmdWriteBufferMarker2AMD
  getQueueCheckpointData2NV