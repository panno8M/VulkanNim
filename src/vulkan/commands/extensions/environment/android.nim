# This file is generated by the program.
# Note that any changes to this file will be reset by the execution of
# the generated program.

# VK_KHR_android_surface
# VK_ANDROID_native_buffer
# VK_ANDROID_external_memory_android_hardware_buffer

import ../../tools
const
  # VK_KHR_android_surface
  KhrAndroidSurfaceSpecVersion* = 6
  KhrAndroidSurfaceExtensionName* = "VK_KHR_android_surface"
  # VK_ANDROID_native_buffer
  AndroidNativeBufferSpecVersion* = 8
  AndroidNativeBufferNumber* = 11
  AndroidNativeBufferExtensionName* = "VK_ANDROID_native_buffer"
  AndroidNativeBufferName* = AndroidNativeBufferExtensionName
  # VK_ANDROID_external_memory_android_hardware_buffer
  AndroidExternalMemoryAndroidHardwareBufferSpecVersion* = 4
  AndroidExternalMemoryAndroidHardwareBufferExtensionName* = "VK_ANDROID_external_memory_android_hardware_buffer"


# VK_KHR_android_surface
# ======================
proc createAndroidSurfaceKHR*(
      instance: Instance;
      pCreateInfo: ptr AndroidSurfaceCreateInfoKHR;
      pAllocator = default(ptr AllocationCallbacks);
      pSurface: ptr SurfaceKHR;
    ): Result {.cdecl,
      successCodes: @[Result.success],
      errorCodes: @[Result.errorOutOfHostMemory, Result.errorOutOfDeviceMemory, Result.errorNativeWindowInUseKhr],
      lazyload("vkCreateAndroidSurfaceKHR", InstanceLevel).}

# VK_ANDROID_native_buffer
# ========================
proc getSwapchainGrallocUsageANDROID*(
      device: Device;
      format: Format;
      imageUsage: ImageUsageFlags;
      grallocUsage: ptr int;
    ): Result {.cdecl, lazyload("vkGetSwapchainGrallocUsageANDROID", DeviceLevel).}
proc acquireImageANDROID*(
      device: Device;
      image: Image;
      nativeFenceFd: int;
      semaphore: Semaphore;
      fence: Fence;
    ): Result {.cdecl, lazyload("vkAcquireImageANDROID", DeviceLevel).}
proc queueSignalReleaseImageANDROID*(
      queue: Queue;
      waitSemaphoreCount: uint32;
      pWaitSemaphores {.length: waitSemaphoreCount.}: arrPtr[Semaphore];
      image: Image;
      pNativeFenceFd: ptr int;
    ): Result {.cdecl, lazyload("vkQueueSignalReleaseImageANDROID", DeviceLevel).}
proc getSwapchainGrallocUsage2ANDROID*(
      device: Device;
      format: Format;
      imageUsage: ImageUsageFlags;
      swapchainImageUsage: SwapchainImageUsageFlagsANDROID;
      grallocConsumerUsage: ptr uint64;
      grallocProducerUsage: ptr uint64;
    ): Result {.cdecl, lazyload("vkGetSwapchainGrallocUsage2ANDROID", DeviceLevel).}

# VK_ANDROID_external_memory_android_hardware_buffer
# ==================================================
proc getAndroidHardwareBufferPropertiesANDROID*(
      device: Device;
      buffer: ptr AHardwareBuffer;
      pProperties: ptr AndroidHardwareBufferPropertiesANDROID;
    ): Result {.cdecl,
      successCodes: @[Result.success],
      errorCodes: @[Result.errorOutOfHostMemory, Result.errorInvalidExternalHandleKhr],
      lazyload("vkGetAndroidHardwareBufferPropertiesANDROID", DeviceLevel).}
proc getMemoryAndroidHardwareBufferANDROID*(
      device: Device;
      pInfo: ptr MemoryGetAndroidHardwareBufferInfoANDROID;
      pBuffer: ptr ptr AHardwareBuffer;
    ): Result {.cdecl,
      successCodes: @[Result.success],
      errorCodes: @[Result.errorTooManyObjects, Result.errorOutOfHostMemory],
      lazyload("vkGetMemoryAndroidHardwareBufferANDROID", DeviceLevel).}


proc loadAllVK_KHR_android_surface*(instance: Instance) = instance.loadCommands:
  createAndroidSurfaceKHR
proc loadAllVK_ANDROID_native_buffer*(instance: Instance) = instance.loadCommands:
  getSwapchainGrallocUsageANDROID
  acquireImageANDROID
  queueSignalReleaseImageANDROID
  getSwapchainGrallocUsage2ANDROID
proc loadAllVK_ANDROID_external_memory_android_hardware_buffer*(instance: Instance) = instance.loadCommands:
  getAndroidHardwareBufferPropertiesANDROID
  getMemoryAndroidHardwareBufferANDROID
proc loadVK_KHR_android_surface*(instance: Instance) = instance.loadCommands:
  createAndroidSurfaceKHR
proc loadVK_ANDROID_native_buffer*(device: Device) = device.loadCommands:
  getSwapchainGrallocUsageANDROID
  acquireImageANDROID
  queueSignalReleaseImageANDROID
  getSwapchainGrallocUsage2ANDROID
proc loadVK_ANDROID_external_memory_android_hardware_buffer*(device: Device) = device.loadCommands:
  getAndroidHardwareBufferPropertiesANDROID
  getMemoryAndroidHardwareBufferANDROID