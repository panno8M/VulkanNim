# This file is generated by the program.
# Note that any changes to this file will be reset by the execution of
# the generated program.

# VK_EXT_debug_report

import ../tools
const
  # VK_EXT_debug_report
  ExtDebugReportSpecVersion* = 10
  ExtDebugReportExtensionName* = "VK_EXT_debug_report"


# VK_EXT_debug_report
# ===================
proc createDebugReportCallbackEXT*(
      instance: Instance;
      pCreateInfo: ptr DebugReportCallbackCreateInfoEXT;
      pAllocator = default(ptr AllocationCallbacks);
      pCallback: ptr DebugReportCallbackEXT;
    ): Result {.lazyload("vkCreateDebugReportCallbackEXT", InstanceLevel),
      successCodes: @[Result.success],
      errorCodes: @[Result.errorOutOfHostMemory].}
proc destroyDebugReportCallbackEXT*(
      instance: Instance;
      callback = default(DebugReportCallbackEXT);
      pAllocator = default(ptr AllocationCallbacks);
    ): void {.lazyload("vkDestroyDebugReportCallbackEXT", InstanceLevel).}
proc debugReportMessageEXT*(
      instance: Instance;
      flags: DebugReportFlagsEXT;
      objectType: DebugReportObjectTypeEXT;
      `object`: uint64;
      location: uint;
      messageCode: int32;
      pLayerPrefix: cstring;
      pMessage: cstring;
    ): void {.lazyload("vkDebugReportMessageEXT", InstanceLevel).}


proc loadAllVK_EXT_debug_report*(instance: Instance) = instance.loadCommands:
  createDebugReportCallbackEXT
  destroyDebugReportCallbackEXT
  debugReportMessageEXT
proc loadVK_EXT_debug_report*(instance: Instance) = instance.loadCommands:
  createDebugReportCallbackEXT
  destroyDebugReportCallbackEXT
  debugReportMessageEXT