# This file is generated by the program.
# Note that any changes to this file will be reset by the execution of
# the generated program.

# VK_KHR_performance_query

import ../tools
const
  # VK_KHR_performance_query
  KhrPerformanceQuerySpecVersion* = 1
  KhrPerformanceQueryExtensionName* = "VK_KHR_performance_query"


# VK_KHR_performance_query
# ========================
proc enumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR*(
      physicalDevice: PhysicalDevice;
      queueFamilyIndex: uint32;
      pCounterCount: ptr uint32;
      pCounters {.length: pCounterCount.} = default(arrPtr[PerformanceCounterKHR]);
      pCounterDescriptions {.length: pCounterCount.} = default(arrPtr[PerformanceCounterDescriptionKHR]);
    ): Result {.cdecl,
      successCodes: @[Result.success, Result.incomplete],
      errorCodes: @[Result.errorOutOfHostMemory, Result.errorOutOfDeviceMemory, Result.errorInitializationFailed],
      lazyload("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR", InstanceLevel).}
proc getPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR*(
      physicalDevice: PhysicalDevice;
      pPerformanceQueryCreateInfo: ptr QueryPoolPerformanceCreateInfoKHR;
      pNumPasses: ptr uint32;
    ): void {.cdecl, lazyload("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR", InstanceLevel).}
proc acquireProfilingLockKHR*(
      device: Device;
      pInfo: ptr AcquireProfilingLockInfoKHR;
    ): Result {.cdecl,
      successCodes: @[Result.success],
      errorCodes: @[Result.errorOutOfHostMemory, Result.timeout],
      lazyload("vkAcquireProfilingLockKHR", DeviceLevel).}
proc releaseProfilingLockKHR*(
      device: Device;
    ): void {.cdecl, lazyload("vkReleaseProfilingLockKHR", DeviceLevel).}


proc loadAllVK_KHR_performance_query*(instance: Instance) = instance.loadCommands:
  enumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR
  getPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR
  acquireProfilingLockKHR
  releaseProfilingLockKHR
proc loadVK_KHR_performance_query*(instance: Instance) = instance.loadCommands:
  enumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR
  getPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR
proc loadVK_KHR_performance_query*(device: Device) = device.loadCommands:
  acquireProfilingLockKHR
  releaseProfilingLockKHR