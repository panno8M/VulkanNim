# This file is generated by the program.
# Note that any changes to this file will be reset by the execution of
# the generated program.

# VK_EXT_debug_marker

import ../tools
const
  # VK_EXT_debug_marker
  ExtDebugMarkerSpecVersion* = 4
  ExtDebugMarkerExtensionName* = "VK_EXT_debug_marker"


# VK_EXT_debug_marker
# ===================
proc debugMarkerSetObjectTagEXT*(
      device: Device;
      pTagInfo: ptr DebugMarkerObjectTagInfoEXT;
    ): Result {.lazyload("vkDebugMarkerSetObjectTagEXT", DeviceLevel),
      successCodes: @[Result.success],
      errorCodes: @[Result.errorOutOfHostMemory, Result.errorOutOfDeviceMemory].}
proc debugMarkerSetObjectNameEXT*(
      device: Device;
      pNameInfo: ptr DebugMarkerObjectNameInfoEXT;
    ): Result {.lazyload("vkDebugMarkerSetObjectNameEXT", DeviceLevel),
      successCodes: @[Result.success],
      errorCodes: @[Result.errorOutOfHostMemory, Result.errorOutOfDeviceMemory].}
proc cmdDebugMarkerBeginEXT*(
      commandBuffer: CommandBuffer;
      pMarkerInfo: ptr DebugMarkerMarkerInfoEXT;
    ): void {.lazyload("vkCmdDebugMarkerBeginEXT", DeviceLevel), cmdchain.}
proc cmdDebugMarkerEndEXT*(
      commandBuffer: CommandBuffer;
    ): void {.lazyload("vkCmdDebugMarkerEndEXT", DeviceLevel), cmdchain.}
proc cmdDebugMarkerInsertEXT*(
      commandBuffer: CommandBuffer;
      pMarkerInfo: ptr DebugMarkerMarkerInfoEXT;
    ): void {.lazyload("vkCmdDebugMarkerInsertEXT", DeviceLevel), cmdchain.}


proc loadAllVK_EXT_debug_marker*(instance: Instance) = instance.loadCommands:
  debugMarkerSetObjectTagEXT
  debugMarkerSetObjectNameEXT
  cmdDebugMarkerBeginEXT
  cmdDebugMarkerEndEXT
  cmdDebugMarkerInsertEXT
proc loadVK_EXT_debug_marker*(device: Device) = device.loadCommands:
  debugMarkerSetObjectTagEXT
  debugMarkerSetObjectNameEXT
  cmdDebugMarkerBeginEXT
  cmdDebugMarkerEndEXT
  cmdDebugMarkerInsertEXT