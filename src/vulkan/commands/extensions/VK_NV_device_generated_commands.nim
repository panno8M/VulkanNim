# This file is generated by the program.
# Note that any changes to this file will be reset by the execution of
# the generated program.

# VK_NV_device_generated_commands

import ../tools
const
  # VK_NV_device_generated_commands
  NvDeviceGeneratedCommandsSpecVersion* = 3
  NvDeviceGeneratedCommandsExtensionName* = "VK_NV_device_generated_commands"


# VK_NV_device_generated_commands
# ===============================
proc getGeneratedCommandsMemoryRequirementsNV*(
      device: Device;
      pInfo: ptr GeneratedCommandsMemoryRequirementsInfoNV;
      pMemoryRequirements: ptr MemoryRequirements2;
    ): void {.lazyload("vkGetGeneratedCommandsMemoryRequirementsNV", DeviceLevel).}
proc cmdPreprocessGeneratedCommandsNV*(
      commandBuffer: CommandBuffer;
      pGeneratedCommandsInfo: ptr GeneratedCommandsInfoNV;
    ): void {.lazyload("vkCmdPreprocessGeneratedCommandsNV", DeviceLevel),
      queues: QueueFlags{graphics, compute}, cmdchain.}
proc cmdExecuteGeneratedCommandsNV*(
      commandBuffer: CommandBuffer;
      isPreprocessed: Bool32;
      pGeneratedCommandsInfo: ptr GeneratedCommandsInfoNV;
    ): void {.lazyload("vkCmdExecuteGeneratedCommandsNV", DeviceLevel),
      queues: QueueFlags{graphics, compute}, cmdchain.}
proc cmdBindPipelineShaderGroupNV*(
      commandBuffer: CommandBuffer;
      pipelineBindPoint: PipelineBindPoint;
      pipeline: Pipeline;
      groupIndex: uint32;
    ): void {.lazyload("vkCmdBindPipelineShaderGroupNV", DeviceLevel),
      queues: QueueFlags{graphics, compute}, cmdchain.}
proc createIndirectCommandsLayoutNV*(
      device: Device;
      pCreateInfo: ptr IndirectCommandsLayoutCreateInfoNV;
      pAllocator = default(ptr AllocationCallbacks);
      pIndirectCommandsLayout: ptr IndirectCommandsLayoutNV;
    ): Result {.lazyload("vkCreateIndirectCommandsLayoutNV", DeviceLevel),
      successCodes: @[Result.success],
      errorCodes: @[Result.errorOutOfHostMemory, Result.errorOutOfDeviceMemory].}
proc destroyIndirectCommandsLayoutNV*(
      device: Device;
      indirectCommandsLayout = default(IndirectCommandsLayoutNV);
      pAllocator = default(ptr AllocationCallbacks);
    ): void {.lazyload("vkDestroyIndirectCommandsLayoutNV", DeviceLevel).}


proc loadAllVK_NV_device_generated_commands*(instance: Instance) = instance.loadCommands:
  getGeneratedCommandsMemoryRequirementsNV
  cmdPreprocessGeneratedCommandsNV
  cmdExecuteGeneratedCommandsNV
  cmdBindPipelineShaderGroupNV
  createIndirectCommandsLayoutNV
  destroyIndirectCommandsLayoutNV
proc loadVK_NV_device_generated_commands*(device: Device) = device.loadCommands:
  getGeneratedCommandsMemoryRequirementsNV
  cmdPreprocessGeneratedCommandsNV
  cmdExecuteGeneratedCommandsNV
  cmdBindPipelineShaderGroupNV
  createIndirectCommandsLayoutNV
  destroyIndirectCommandsLayoutNV