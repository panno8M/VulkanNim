# This file is generated by the program.
# Note that any changes to this file will be reset by the execution of
# the generated program.

# VK_KHR_video_queue

import ../tools
const
  # VK_KHR_video_queue
  KhrVideoQueueSpecVersion* = 2
  KhrVideoQueueExtensionName* = "VK_KHR_video_queue"


# VK_KHR_video_queue
# ==================
proc getPhysicalDeviceVideoCapabilitiesKHR*(
      physicalDevice: PhysicalDevice;
      pVideoProfile: ptr VideoProfileKHR;
      pCapabilities: ptr VideoCapabilitiesKHR;
    ): Result {.cdecl,
      successCodes: @[Result.success],
      errorCodes: @[Result.errorExtensionNotPresent, Result.errorInitializationFailed, Result.errorFeatureNotPresent, Result.errorFormatNotSupported],
      lazyload("vkGetPhysicalDeviceVideoCapabilitiesKHR", InstanceLevel).}
proc getPhysicalDeviceVideoFormatPropertiesKHR*(
      physicalDevice: PhysicalDevice;
      pVideoFormatInfo: ptr PhysicalDeviceVideoFormatInfoKHR;
      pVideoFormatPropertyCount: ptr uint32;
      pVideoFormatProperties {.length: pVideoFormatPropertyCount.} = default(arrPtr[VideoFormatPropertiesKHR]);
    ): Result {.cdecl,
      successCodes: @[Result.success, Result.incomplete],
      errorCodes: @[Result.errorExtensionNotPresent, Result.errorInitializationFailed, Result.errorFormatNotSupported],
      lazyload("vkGetPhysicalDeviceVideoFormatPropertiesKHR", InstanceLevel).}
proc createVideoSessionKHR*(
      device: Device;
      pCreateInfo: ptr VideoSessionCreateInfoKHR;
      pAllocator = default(ptr AllocationCallbacks);
      pVideoSession: ptr VideoSessionKHR;
    ): Result {.cdecl,
      successCodes: @[Result.success],
      errorCodes: @[Result.errorOutOfHostMemory, Result.errorOutOfDeviceMemory, Result.errorInitializationFailed, Result.errorIncompatibleDriver, Result.errorFeatureNotPresent],
      lazyload("vkCreateVideoSessionKHR", DeviceLevel).}
proc destroyVideoSessionKHR*(
      device: Device;
      videoSession: VideoSessionKHR;
      pAllocator = default(ptr AllocationCallbacks);
    ): void {.cdecl, lazyload("vkDestroyVideoSessionKHR", DeviceLevel).}
proc getVideoSessionMemoryRequirementsKHR*(
      device: Device;
      videoSession: VideoSessionKHR;
      pVideoSessionMemoryRequirementsCount: ptr uint32;
      pVideoSessionMemoryRequirements {.length: pVideoSessionMemoryRequirementsCount.} = default(arrPtr[VideoGetMemoryPropertiesKHR]);
    ): Result {.cdecl,
      successCodes: @[Result.success, Result.incomplete],
      errorCodes: @[Result.errorInitializationFailed],
      lazyload("vkGetVideoSessionMemoryRequirementsKHR", DeviceLevel).}
proc bindVideoSessionMemoryKHR*(
      device: Device;
      videoSession: VideoSessionKHR;
      videoSessionBindMemoryCount: uint32;
      pVideoSessionBindMemories {.length: videoSessionBindMemoryCount.}: arrPtr[VideoBindMemoryKHR];
    ): Result {.cdecl,
      successCodes: @[Result.success],
      errorCodes: @[Result.errorOutOfHostMemory, Result.errorOutOfDeviceMemory, Result.errorInitializationFailed],
      lazyload("vkBindVideoSessionMemoryKHR", DeviceLevel).}
proc createVideoSessionParametersKHR*(
      device: Device;
      pCreateInfo: ptr VideoSessionParametersCreateInfoKHR;
      pAllocator = default(ptr AllocationCallbacks);
      pVideoSessionParameters: ptr VideoSessionParametersKHR;
    ): Result {.cdecl,
      successCodes: @[Result.success],
      errorCodes: @[Result.errorInitializationFailed, Result.errorOutOfHostMemory, Result.errorOutOfDeviceMemory, Result.errorTooManyObjects],
      lazyload("vkCreateVideoSessionParametersKHR", DeviceLevel).}
proc updateVideoSessionParametersKHR*(
      device: Device;
      videoSessionParameters: VideoSessionParametersKHR;
      pUpdateInfo: ptr VideoSessionParametersUpdateInfoKHR;
    ): Result {.cdecl,
      successCodes: @[Result.success],
      errorCodes: @[Result.errorInitializationFailed, Result.errorTooManyObjects],
      lazyload("vkUpdateVideoSessionParametersKHR", DeviceLevel).}
proc destroyVideoSessionParametersKHR*(
      device: Device;
      videoSessionParameters: VideoSessionParametersKHR;
      pAllocator = default(ptr AllocationCallbacks);
    ): void {.cdecl, lazyload("vkDestroyVideoSessionParametersKHR", DeviceLevel).}
proc cmdBeginVideoCodingKHR*(
      commandBuffer: CommandBuffer;
      pBeginInfo: ptr VideoBeginCodingInfoKHR;
    ): void {.cdecl, lazyload("vkCmdBeginVideoCodingKHR", DeviceLevel).}
proc cmdEndVideoCodingKHR*(
      commandBuffer: CommandBuffer;
      pEndCodingInfo: ptr VideoEndCodingInfoKHR;
    ): void {.cdecl, lazyload("vkCmdEndVideoCodingKHR", DeviceLevel).}
proc cmdControlVideoCodingKHR*(
      commandBuffer: CommandBuffer;
      pCodingControlInfo: ptr VideoCodingControlInfoKHR;
    ): void {.cdecl, lazyload("vkCmdControlVideoCodingKHR", DeviceLevel).}


proc loadAllVK_KHR_video_queue*(instance: Instance) = instance.loadCommands:
  getPhysicalDeviceVideoCapabilitiesKHR
  getPhysicalDeviceVideoFormatPropertiesKHR
  createVideoSessionKHR
  destroyVideoSessionKHR
  getVideoSessionMemoryRequirementsKHR
  bindVideoSessionMemoryKHR
  createVideoSessionParametersKHR
  updateVideoSessionParametersKHR
  destroyVideoSessionParametersKHR
  cmdBeginVideoCodingKHR
  cmdEndVideoCodingKHR
  cmdControlVideoCodingKHR
proc loadVK_KHR_video_queue*(instance: Instance) = instance.loadCommands:
  getPhysicalDeviceVideoCapabilitiesKHR
  getPhysicalDeviceVideoFormatPropertiesKHR
proc loadVK_KHR_video_queue*(device: Device) = device.loadCommands:
  createVideoSessionKHR
  destroyVideoSessionKHR
  getVideoSessionMemoryRequirementsKHR
  bindVideoSessionMemoryKHR
  createVideoSessionParametersKHR
  updateVideoSessionParametersKHR
  destroyVideoSessionParametersKHR
  cmdBeginVideoCodingKHR
  cmdEndVideoCodingKHR
  cmdControlVideoCodingKHR