# This file is generated by the program.
# Note that any changes to this file will be reset by the execution of
# the generated program.

import utils/enumutilities
import basetypes

type
  # VERSION 1 0
  # -----------
  # API result codes
  Result* {.vkEnum.} = enum
    errorUnknown = -13 # An unknown error has occurred, due to an implementation or application bug
    errorFragmentedPool = -12 # A requested pool allocation has failed due to fragmentation of the pool's memory
    errorFormatNotSupported = -11 # Requested format is not supported on this device
    errorTooManyObjects = -10 # Too many objects of the type have already been created
    errorIncompatibleDriver = -9 # Unable to find a Vulkan driver
    errorFeatureNotPresent = -8 # Requested feature is not available on this device
    errorExtensionNotPresent = -7 # Extension specified does not exist
    errorLayerNotPresent = -6 # Layer specified does not exist
    errorMemoryMapFailed = -5 # Mapping of a memory object has failed
    errorDeviceLost = -4 # The logical device has been lost. See <<devsandqueues-lost-device>>
    errorInitializationFailed = -3 # Initialization of a object has failed
    errorOutOfDeviceMemory = -2 # A device memory allocation has failed
    errorOutOfHostMemory = -1 # A host memory allocation has failed
    success = 0 # Command completed successfully
    notReady = 1 # A fence or query has not yet completed
    timeout = 2 # A wait operation has not completed in the specified time
    eventSet = 3 # An event is signaled
    eventReset = 4 # An event is unsignaled
    incomplete = 5 # A return array was too small for the result
    # Provided by VK_KHR_surface
    errorSurfaceLostKhr = 1000000000
    errorNativeWindowInUseKhr = 1000000001
    # Provided by VK_KHR_swapchain
    suboptimalKhr = 1000001003
    errorOutOfDateKhr = 1000001004
    # Provided by VK_KHR_display_swapchain
    errorIncompatibleDisplayKhr = 1000003001
    # Provided by VK_EXT_debug_report
    errorValidationFailedExt = 1000011001
    # Provided by VK_NV_glsl_shader
    errorInvalidShaderNv = 1000012000
    # Provided by VK_VERSION_1_1
    errorOutOfPoolMemory = 1000069000
    errorInvalidExternalHandle = 1000072003
    # Provided by VK_KHR_ray_tracing
    errorIncompatibleVersionKhr = 1000150000
    # Provided by VK_EXT_image_drm_format_modifier
    errorInvalidDrmFormatModifierPlaneLayoutExt = 1000158000
    # Provided by VK_VERSION_1_2
    errorFragmentation = 1000161000
    # Provided by VK_EXT_global_priority
    errorNotPermittedExt = 1000174001
    # Provided by VK_EXT_full_screen_exclusive
    errorFullScreenExclusiveModeLostExt = 1000255000
    # Provided by VK_VERSION_1_2
    errorInvalidOpaqueCaptureAddress = 1000257000
    # Provided by VK_KHR_deferred_host_operations
    threadIdleKhr = 1000268000
    threadDoneKhr = 1000268001
    operationDeferredKhr = 1000268002
    operationNotDeferredKhr = 1000268003
    # Provided by VK_EXT_pipeline_creation_cache_control
    pipelineCompileRequiredExt = 1000297000
  # Structure type enumerant
  StructureType* {.vkEnum.} = enum
    applicationInfo = 0
    instanceCreateInfo = 1
    deviceQueueCreateInfo = 2
    deviceCreateInfo = 3
    submitInfo = 4
    memoryAllocateInfo = 5
    mappedMemoryRange = 6
    bindSparseInfo = 7
    fenceCreateInfo = 8
    semaphoreCreateInfo = 9
    eventCreateInfo = 10
    queryPoolCreateInfo = 11
    bufferCreateInfo = 12
    bufferViewCreateInfo = 13
    imageCreateInfo = 14
    imageViewCreateInfo = 15
    shaderModuleCreateInfo = 16
    pipelineCacheCreateInfo = 17
    pipelineShaderStageCreateInfo = 18
    pipelineVertexInputStateCreateInfo = 19
    pipelineInputAssemblyStateCreateInfo = 20
    pipelineTessellationStateCreateInfo = 21
    pipelineViewportStateCreateInfo = 22
    pipelineRasterizationStateCreateInfo = 23
    pipelineMultisampleStateCreateInfo = 24
    pipelineDepthStencilStateCreateInfo = 25
    pipelineColorBlendStateCreateInfo = 26
    pipelineDynamicStateCreateInfo = 27
    graphicsPipelineCreateInfo = 28
    computePipelineCreateInfo = 29
    pipelineLayoutCreateInfo = 30
    samplerCreateInfo = 31
    descriptorSetLayoutCreateInfo = 32
    descriptorPoolCreateInfo = 33
    descriptorSetAllocateInfo = 34
    writeDescriptorSet = 35
    copyDescriptorSet = 36
    framebufferCreateInfo = 37
    renderPassCreateInfo = 38
    commandPoolCreateInfo = 39
    commandBufferAllocateInfo = 40
    commandBufferInheritanceInfo = 41
    commandBufferBeginInfo = 42
    renderPassBeginInfo = 43
    bufferMemoryBarrier = 44
    imageMemoryBarrier = 45
    memoryBarrier = 46
    loaderInstanceCreateInfo = 47 # Reserved for internal use by the loader, layers, and ICDs
    loaderDeviceCreateInfo = 48 # Reserved for internal use by the loader, layers, and ICDs
    # Provided by VK_VERSION_1_2
    physicalDeviceVulkan11Features = 49
    physicalDeviceVulkan11Properties = 50
    physicalDeviceVulkan12Features = 51
    physicalDeviceVulkan12Properties = 52
    # Provided by VK_KHR_swapchain
    swapchainCreateInfoKhr = 1000001000
    presentInfoKhr = 1000001001
    # Provided by VK_KHR_display
    displayModeCreateInfoKhr = 1000002000
    displaySurfaceCreateInfoKhr = 1000002001
    # Provided by VK_KHR_display_swapchain
    displayPresentInfoKhr = 1000003000
    # Provided by VK_KHR_xlib_surface
    xlibSurfaceCreateInfoKhr = 1000004000
    # Provided by VK_KHR_xcb_surface
    xcbSurfaceCreateInfoKhr = 1000005000
    # Provided by VK_KHR_wayland_surface
    waylandSurfaceCreateInfoKhr = 1000006000
    # Provided by VK_KHR_android_surface
    androidSurfaceCreateInfoKhr = 1000008000
    # Provided by VK_KHR_win32_surface
    win32SurfaceCreateInfoKhr = 1000009000
    # Provided by VK_ANDROID_native_buffer
    nativeBufferAndroid = 1000010000
    swapchainImageCreateInfoAndroid = 1000010001
    physicalDevicePresentationPropertiesAndroid = 1000010002
    # Provided by VK_EXT_debug_report
    debugReportCallbackCreateInfoExt = 1000011000
    # Provided by VK_AMD_rasterization_order
    pipelineRasterizationStateRasterizationOrderAmd = 1000018000
    # Provided by VK_EXT_debug_marker
    debugMarkerObjectNameInfoExt = 1000022000
    debugMarkerObjectTagInfoExt = 1000022001
    debugMarkerMarkerInfoExt = 1000022002
    # Provided by VK_NV_dedicated_allocation
    dedicatedAllocationImageCreateInfoNv = 1000026000
    dedicatedAllocationBufferCreateInfoNv = 1000026001
    dedicatedAllocationMemoryAllocateInfoNv = 1000026002
    # Provided by VK_EXT_transform_feedback
    physicalDeviceTransformFeedbackFeaturesExt = 1000028000
    physicalDeviceTransformFeedbackPropertiesExt = 1000028001
    pipelineRasterizationStateStreamCreateInfoExt = 1000028002
    # Provided by VK_NVX_image_view_handle
    imageViewHandleInfoNvx = 1000030000
    imageViewAddressPropertiesNvx = 1000030001
    # Provided by VK_AMD_texture_gather_bias_lod
    textureLodGatherFormatPropertiesAmd = 1000041000
    # Provided by VK_GGP_stream_descriptor_surface
    streamDescriptorSurfaceCreateInfoGgp = 1000049000
    # Provided by VK_NV_corner_sampled_image
    physicalDeviceCornerSampledImageFeaturesNv = 1000050000
    # Provided by VK_VERSION_1_1
    renderPassMultiviewCreateInfo = 1000053000
    physicalDeviceMultiviewFeatures = 1000053001
    physicalDeviceMultiviewProperties = 1000053002
    # Provided by VK_NV_external_memory
    externalMemoryImageCreateInfoNv = 1000056000
    exportMemoryAllocateInfoNv = 1000056001
    # Provided by VK_NV_external_memory_win32
    importMemoryWin32HandleInfoNv = 1000057000
    exportMemoryWin32HandleInfoNv = 1000057001
    # Provided by VK_NV_win32_keyed_mutex
    win32KeyedMutexAcquireReleaseInfoNv = 1000058000
    # Provided by VK_VERSION_1_1
    physicalDeviceFeatures2 = 1000059000
    physicalDeviceProperties2 = 1000059001
    formatProperties2 = 1000059002
    imageFormatProperties2 = 1000059003
    physicalDeviceImageFormatInfo2 = 1000059004
    queueFamilyProperties2 = 1000059005
    physicalDeviceMemoryProperties2 = 1000059006
    sparseImageFormatProperties2 = 1000059007
    physicalDeviceSparseImageFormatInfo2 = 1000059008
    memoryAllocateFlagsInfo = 1000060000
    deviceGroupRenderPassBeginInfo = 1000060003
    deviceGroupCommandBufferBeginInfo = 1000060004
    deviceGroupSubmitInfo = 1000060005
    deviceGroupBindSparseInfo = 1000060006
    # Provided by VK_KHR_swapchain
    deviceGroupPresentCapabilitiesKhr = 1000060007
    imageSwapchainCreateInfoKhr = 1000060008
    bindImageMemorySwapchainInfoKhr = 1000060009
    acquireNextImageInfoKhr = 1000060010
    deviceGroupPresentInfoKhr = 1000060011
    deviceGroupSwapchainCreateInfoKhr = 1000060012
    # Provided by VK_VERSION_1_1
    bindBufferMemoryDeviceGroupInfo = 1000060013
    bindImageMemoryDeviceGroupInfo = 1000060014
    # Provided by VK_EXT_validation_flags
    validationFlagsExt = 1000061000
    # Provided by VK_NN_vi_surface
    viSurfaceCreateInfoNn = 1000062000
    # Provided by VK_VERSION_1_1
    physicalDeviceShaderDrawParametersFeatures = 1000063000
    # Provided by VK_EXT_texture_compression_astc_hdr
    physicalDeviceTextureCompressionAstcHdrFeaturesExt = 1000066000
    # Provided by VK_EXT_astc_decode_mode
    imageViewAstcDecodeModeExt = 1000067000
    physicalDeviceAstcDecodeFeaturesExt = 1000067001
    # Provided by VK_VERSION_1_1
    physicalDeviceGroupProperties = 1000070000
    deviceGroupDeviceCreateInfo = 1000070001
    physicalDeviceExternalImageFormatInfo = 1000071000
    externalImageFormatProperties = 1000071001
    physicalDeviceExternalBufferInfo = 1000071002
    externalBufferProperties = 1000071003
    physicalDeviceIdProperties = 1000071004
    externalMemoryBufferCreateInfo = 1000072000
    externalMemoryImageCreateInfo = 1000072001
    exportMemoryAllocateInfo = 1000072002
    # Provided by VK_KHR_external_memory_win32
    importMemoryWin32HandleInfoKhr = 1000073000
    exportMemoryWin32HandleInfoKhr = 1000073001
    memoryWin32HandlePropertiesKhr = 1000073002
    memoryGetWin32HandleInfoKhr = 1000073003
    # Provided by VK_KHR_external_memory_fd
    importMemoryFdInfoKhr = 1000074000
    memoryFdPropertiesKhr = 1000074001
    memoryGetFdInfoKhr = 1000074002
    # Provided by VK_KHR_win32_keyed_mutex
    win32KeyedMutexAcquireReleaseInfoKhr = 1000075000
    # Provided by VK_VERSION_1_1
    physicalDeviceExternalSemaphoreInfo = 1000076000
    externalSemaphoreProperties = 1000076001
    exportSemaphoreCreateInfo = 1000077000
    # Provided by VK_KHR_external_semaphore_win32
    importSemaphoreWin32HandleInfoKhr = 1000078000
    exportSemaphoreWin32HandleInfoKhr = 1000078001
    d3d12FenceSubmitInfoKhr = 1000078002
    semaphoreGetWin32HandleInfoKhr = 1000078003
    # Provided by VK_KHR_external_semaphore_fd
    importSemaphoreFdInfoKhr = 1000079000
    semaphoreGetFdInfoKhr = 1000079001
    # Provided by VK_KHR_push_descriptor
    physicalDevicePushDescriptorPropertiesKhr = 1000080000
    # Provided by VK_EXT_conditional_rendering
    commandBufferInheritanceConditionalRenderingInfoExt = 1000081000
    physicalDeviceConditionalRenderingFeaturesExt = 1000081001
    conditionalRenderingBeginInfoExt = 1000081002
    # Provided by VK_VERSION_1_2
    physicalDeviceShaderFloat16Int8Features = 1000082000
    # Provided by VK_VERSION_1_1
    physicalDevice16bitStorageFeatures = 1000083000
    # Provided by VK_KHR_incremental_present
    presentRegionsKhr = 1000084000
    # Provided by VK_VERSION_1_1
    descriptorUpdateTemplateCreateInfo = 1000085000
    # Provided by VK_NV_clip_space_w_scaling
    pipelineViewportWScalingStateCreateInfoNv = 1000087000
    # Provided by VK_EXT_display_surface_counter
    surfaceCapabilities2Ext = 1000090000
    # Provided by VK_EXT_display_control
    displayPowerInfoExt = 1000091000
    deviceEventInfoExt = 1000091001
    displayEventInfoExt = 1000091002
    swapchainCounterCreateInfoExt = 1000091003
    # Provided by VK_GOOGLE_display_timing
    presentTimesInfoGoogle = 1000092000
    # Provided by VK_VERSION_1_1
    physicalDeviceSubgroupProperties = 1000094000
    # Provided by VK_NVX_multiview_per_view_attributes
    physicalDeviceMultiviewPerViewAttributesPropertiesNvx = 1000097000
    # Provided by VK_NV_viewport_swizzle
    pipelineViewportSwizzleStateCreateInfoNv = 1000098000
    # Provided by VK_EXT_discard_rectangles
    physicalDeviceDiscardRectanglePropertiesExt = 1000099000
    pipelineDiscardRectangleStateCreateInfoExt = 1000099001
    # Provided by VK_EXT_conservative_rasterization
    physicalDeviceConservativeRasterizationPropertiesExt = 1000101000
    pipelineRasterizationConservativeStateCreateInfoExt = 1000101001
    # Provided by VK_EXT_depth_clip_enable
    physicalDeviceDepthClipEnableFeaturesExt = 1000102000
    pipelineRasterizationDepthClipStateCreateInfoExt = 1000102001
    # Provided by VK_EXT_hdr_metadata
    hdrMetadataExt = 1000105000
    # Provided by VK_VERSION_1_2
    physicalDeviceImagelessFramebufferFeatures = 1000108000
    framebufferAttachmentsCreateInfo = 1000108001
    framebufferAttachmentImageInfo = 1000108002
    renderPassAttachmentBeginInfo = 1000108003
    attachmentDescription2 = 1000109000
    attachmentReference2 = 1000109001
    subpassDescription2 = 1000109002
    subpassDependency2 = 1000109003
    renderPassCreateInfo2 = 1000109004
    subpassBeginInfo = 1000109005
    subpassEndInfo = 1000109006
    # Provided by VK_KHR_shared_presentable_image
    sharedPresentSurfaceCapabilitiesKhr = 1000111000
    # Provided by VK_VERSION_1_1
    physicalDeviceExternalFenceInfo = 1000112000
    externalFenceProperties = 1000112001
    exportFenceCreateInfo = 1000113000
    # Provided by VK_KHR_external_fence_win32
    importFenceWin32HandleInfoKhr = 1000114000
    exportFenceWin32HandleInfoKhr = 1000114001
    fenceGetWin32HandleInfoKhr = 1000114002
    # Provided by VK_KHR_external_fence_fd
    importFenceFdInfoKhr = 1000115000
    fenceGetFdInfoKhr = 1000115001
    # Provided by VK_KHR_performance_query
    physicalDevicePerformanceQueryFeaturesKhr = 1000116000
    physicalDevicePerformanceQueryPropertiesKhr = 1000116001
    queryPoolPerformanceCreateInfoKhr = 1000116002
    performanceQuerySubmitInfoKhr = 1000116003
    acquireProfilingLockInfoKhr = 1000116004
    performanceCounterKhr = 1000116005
    performanceCounterDescriptionKhr = 1000116006
    # Provided by VK_VERSION_1_1
    physicalDevicePointClippingProperties = 1000117000
    renderPassInputAttachmentAspectCreateInfo = 1000117001
    imageViewUsageCreateInfo = 1000117002
    pipelineTessellationDomainOriginStateCreateInfo = 1000117003
    # Provided by VK_KHR_get_surface_capabilities2
    physicalDeviceSurfaceInfo2Khr = 1000119000
    surfaceCapabilities2Khr = 1000119001
    surfaceFormat2Khr = 1000119002
    # Provided by VK_VERSION_1_1
    physicalDeviceVariablePointersFeatures = 1000120000
    # Provided by VK_KHR_get_display_properties2
    displayProperties2Khr = 1000121000
    displayPlaneProperties2Khr = 1000121001
    displayModeProperties2Khr = 1000121002
    displayPlaneInfo2Khr = 1000121003
    displayPlaneCapabilities2Khr = 1000121004
    # Provided by VK_MVK_ios_surface
    iosSurfaceCreateInfoM = 1000122000
    # Provided by VK_MVK_macos_surface
    macosSurfaceCreateInfoM = 1000123000
    # Provided by VK_VERSION_1_1
    memoryDedicatedRequirements = 1000127000
    memoryDedicatedAllocateInfo = 1000127001
    # Provided by VK_EXT_debug_utils
    debugUtilsObjectNameInfoExt = 1000128000
    debugUtilsObjectTagInfoExt = 1000128001
    debugUtilsLabelExt = 1000128002
    debugUtilsMessengerCallbackDataExt = 1000128003
    debugUtilsMessengerCreateInfoExt = 1000128004
    # Provided by VK_ANDROID_external_memory_android_hardware_buffer
    androidHardwareBufferUsageAndroid = 1000129000
    androidHardwareBufferPropertiesAndroid = 1000129001
    androidHardwareBufferFormatPropertiesAndroid = 1000129002
    importAndroidHardwareBufferInfoAndroid = 1000129003
    memoryGetAndroidHardwareBufferInfoAndroid = 1000129004
    externalFormatAndroid = 1000129005
    # Provided by VK_VERSION_1_2
    physicalDeviceSamplerFilterMinmaxProperties = 1000130000
    samplerReductionModeCreateInfo = 1000130001
    # Provided by VK_EXT_inline_uniform_block
    physicalDeviceInlineUniformBlockFeaturesExt = 1000138000
    physicalDeviceInlineUniformBlockPropertiesExt = 1000138001
    writeDescriptorSetInlineUniformBlockExt = 1000138002
    descriptorPoolInlineUniformBlockCreateInfoExt = 1000138003
    # Provided by VK_EXT_sample_locations
    sampleLocationsInfoExt = 1000143000
    renderPassSampleLocationsBeginInfoExt = 1000143001
    pipelineSampleLocationsStateCreateInfoExt = 1000143002
    physicalDeviceSampleLocationsPropertiesExt = 1000143003
    multisamplePropertiesExt = 1000143004
    # Provided by VK_VERSION_1_1
    protectedSubmitInfo = 1000145000
    physicalDeviceProtectedMemoryFeatures = 1000145001
    physicalDeviceProtectedMemoryProperties = 1000145002
    deviceQueueInfo2 = 1000145003
    bufferMemoryRequirementsInfo2 = 1000146000
    imageMemoryRequirementsInfo2 = 1000146001
    imageSparseMemoryRequirementsInfo2 = 1000146002
    memoryRequirements2 = 1000146003
    sparseImageMemoryRequirements2 = 1000146004
    # Provided by VK_VERSION_1_2
    imageFormatListCreateInfo = 1000147000
    # Provided by VK_EXT_blend_operation_advanced
    physicalDeviceBlendOperationAdvancedFeaturesExt = 1000148000
    physicalDeviceBlendOperationAdvancedPropertiesExt = 1000148001
    pipelineColorBlendAdvancedStateCreateInfoExt = 1000148002
    # Provided by VK_NV_fragment_coverage_to_color
    pipelineCoverageToColorStateCreateInfoNv = 1000149000
    # Provided by VK_KHR_ray_tracing
    accelerationStructureBuildGeometryInfoKhr = 1000150000
    accelerationStructureCreateGeometryTypeInfoKhr = 1000150001
    accelerationStructureDeviceAddressInfoKhr = 1000150002
    accelerationStructureGeometryAabbsDataKhr = 1000150003
    accelerationStructureGeometryInstancesDataKhr = 1000150004
    accelerationStructureGeometryTrianglesDataKhr = 1000150005
    accelerationStructureGeometryKhr = 1000150006
    accelerationStructureMemoryRequirementsInfoKhr = 1000150008
    accelerationStructureVersionKhr = 1000150009
    copyAccelerationStructureInfoKhr = 1000150010
    copyAccelerationStructureToMemoryInfoKhr = 1000150011
    copyMemoryToAccelerationStructureInfoKhr = 1000150012
    physicalDeviceRayTracingFeaturesKhr = 1000150013
    physicalDeviceRayTracingPropertiesKhr = 1000150014
    rayTracingPipelineCreateInfoKhr = 1000150015
    rayTracingShaderGroupCreateInfoKhr = 1000150016
    accelerationStructureCreateInfoKhr = 1000150017
    rayTracingPipelineInterfaceCreateInfoKhr = 1000150018
    # Provided by VK_NV_framebuffer_mixed_samples
    pipelineCoverageModulationStateCreateInfoNv = 1000152000
    # Provided by VK_NV_shader_sm_builtins
    physicalDeviceShaderSmBuiltinsFeaturesNv = 1000154000
    physicalDeviceShaderSmBuiltinsPropertiesNv = 1000154001
    # Provided by VK_VERSION_1_1
    samplerYcbcrConversionCreateInfo = 1000156000
    samplerYcbcrConversionInfo = 1000156001
    bindImagePlaneMemoryInfo = 1000156002
    imagePlaneMemoryRequirementsInfo = 1000156003
    physicalDeviceSamplerYcbcrConversionFeatures = 1000156004
    samplerYcbcrConversionImageFormatProperties = 1000156005
    bindBufferMemoryInfo = 1000157000
    bindImageMemoryInfo = 1000157001
    # Provided by VK_EXT_image_drm_format_modifier
    drmFormatModifierPropertiesListExt = 1000158000
    drmFormatModifierPropertiesExt = 1000158001
    physicalDeviceImageDrmFormatModifierInfoExt = 1000158002
    imageDrmFormatModifierListCreateInfoExt = 1000158003
    imageDrmFormatModifierExplicitCreateInfoExt = 1000158004
    imageDrmFormatModifierPropertiesExt = 1000158005
    # Provided by VK_EXT_validation_cache
    validationCacheCreateInfoExt = 1000160000
    shaderModuleValidationCacheCreateInfoExt = 1000160001
    # Provided by VK_VERSION_1_2
    descriptorSetLayoutBindingFlagsCreateInfo = 1000161000
    physicalDeviceDescriptorIndexingFeatures = 1000161001
    physicalDeviceDescriptorIndexingProperties = 1000161002
    descriptorSetVariableDescriptorCountAllocateInfo = 1000161003
    descriptorSetVariableDescriptorCountLayoutSupport = 1000161004
    # Provided by VK_NV_shading_rate_image
    pipelineViewportShadingRateImageStateCreateInfoNv = 1000164000
    physicalDeviceShadingRateImageFeaturesNv = 1000164001
    physicalDeviceShadingRateImagePropertiesNv = 1000164002
    pipelineViewportCoarseSampleOrderStateCreateInfoNv = 1000164005
    # Provided by VK_NV_ray_tracing
    rayTracingPipelineCreateInfoNv = 1000165000
    accelerationStructureCreateInfoNv = 1000165001
    geometryNv = 1000165003
    geometryTrianglesNv = 1000165004
    geometryAabbNv = 1000165005
    # Provided by VK_KHR_ray_tracing
    bindAccelerationStructureMemoryInfoKhr = 1000165006
    writeDescriptorSetAccelerationStructureKhr = 1000165007
    # Provided by VK_NV_ray_tracing
    accelerationStructureMemoryRequirementsInfoNv = 1000165008
    physicalDeviceRayTracingPropertiesNv = 1000165009
    rayTracingShaderGroupCreateInfoNv = 1000165011
    accelerationStructureInfoNv = 1000165012
    # Provided by VK_NV_representative_fragment_test
    physicalDeviceRepresentativeFragmentTestFeaturesNv = 1000166000
    pipelineRepresentativeFragmentTestStateCreateInfoNv = 1000166001
    # Provided by VK_VERSION_1_1
    physicalDeviceMaintenance3Properties = 1000168000
    descriptorSetLayoutSupport = 1000168001
    # Provided by VK_EXT_filter_cubic
    physicalDeviceImageViewImageFormatInfoExt = 1000170000
    filterCubicImageViewImageFormatPropertiesExt = 1000170001
    # Provided by VK_EXT_global_priority
    deviceQueueGlobalPriorityCreateInfoExt = 1000174000
    # Provided by VK_VERSION_1_2
    physicalDeviceShaderSubgroupExtendedTypesFeatures = 1000175000
    physicalDevice8bitStorageFeatures = 1000177000
    # Provided by VK_EXT_external_memory_host
    importMemoryHostPointerInfoExt = 1000178000
    memoryHostPointerPropertiesExt = 1000178001
    physicalDeviceExternalMemoryHostPropertiesExt = 1000178002
    # Provided by VK_VERSION_1_2
    physicalDeviceShaderAtomicInt64Features = 1000180000
    # Provided by VK_KHR_shader_clock
    physicalDeviceShaderClockFeaturesKhr = 1000181000
    # Provided by VK_AMD_pipeline_compiler_control
    pipelineCompilerControlCreateInfoAmd = 1000183000
    # Provided by VK_EXT_calibrated_timestamps
    calibratedTimestampInfoExt = 1000184000
    # Provided by VK_AMD_shader_core_properties
    physicalDeviceShaderCorePropertiesAmd = 1000185000
    # Provided by VK_AMD_memory_overallocation_behavior
    deviceMemoryOverallocationCreateInfoAmd = 1000189000
    # Provided by VK_EXT_vertex_attribute_divisor
    physicalDeviceVertexAttributeDivisorPropertiesExt = 1000190000
    pipelineVertexInputDivisorStateCreateInfoExt = 1000190001
    physicalDeviceVertexAttributeDivisorFeaturesExt = 1000190002
    # Provided by VK_GGP_frame_token
    presentFrameTokenGgp = 1000191000
    # Provided by VK_EXT_pipeline_creation_feedback
    pipelineCreationFeedbackCreateInfoExt = 1000192000
    # Provided by VK_VERSION_1_2
    physicalDeviceDriverProperties = 1000196000
    physicalDeviceFloatControlsProperties = 1000197000
    physicalDeviceDepthStencilResolveProperties = 1000199000
    subpassDescriptionDepthStencilResolve = 1000199001
    # Provided by VK_NV_compute_shader_derivatives
    physicalDeviceComputeShaderDerivativesFeaturesNv = 1000201000
    # Provided by VK_NV_mesh_shader
    physicalDeviceMeshShaderFeaturesNv = 1000202000
    physicalDeviceMeshShaderPropertiesNv = 1000202001
    # Provided by VK_NV_fragment_shader_barycentric
    physicalDeviceFragmentShaderBarycentricFeaturesNv = 1000203000
    # Provided by VK_NV_shader_image_footprint
    physicalDeviceShaderImageFootprintFeaturesNv = 1000204000
    # Provided by VK_NV_scissor_exclusive
    pipelineViewportExclusiveScissorStateCreateInfoNv = 1000205000
    physicalDeviceExclusiveScissorFeaturesNv = 1000205002
    # Provided by VK_NV_device_diagnostic_checkpoints
    checkpointDataNv = 1000206000
    queueFamilyCheckpointPropertiesNv = 1000206001
    # Provided by VK_VERSION_1_2
    physicalDeviceTimelineSemaphoreFeatures = 1000207000
    physicalDeviceTimelineSemaphoreProperties = 1000207001
    semaphoreTypeCreateInfo = 1000207002
    timelineSemaphoreSubmitInfo = 1000207003
    semaphoreWaitInfo = 1000207004
    semaphoreSignalInfo = 1000207005
    # Provided by VK_INTEL_shader_integer_functions2
    physicalDeviceShaderIntegerFunctions2FeaturesIntel = 1000209000
    # Provided by VK_INTEL_performance_query
    queryPoolPerformanceQueryCreateInfoIntel = 1000210000
    initializePerformanceApiInfoIntel = 1000210001
    performanceMarkerInfoIntel = 1000210002
    performanceStreamMarkerInfoIntel = 1000210003
    performanceOverrideInfoIntel = 1000210004
    performanceConfigurationAcquireInfoIntel = 1000210005
    # Provided by VK_VERSION_1_2
    physicalDeviceVulkanMemoryModelFeatures = 1000211000
    # Provided by VK_EXT_pci_bus_info
    physicalDevicePciBusInfoPropertiesExt = 1000212000
    # Provided by VK_AMD_display_native_hdr
    displayNativeHdrSurfaceCapabilitiesAmd = 1000213000
    swapchainDisplayNativeHdrCreateInfoAmd = 1000213001
    # Provided by VK_FUCHSIA_imagepipe_surface
    imagepipeSurfaceCreateInfoFuchsia = 1000214000
    # Provided by VK_EXT_metal_surface
    metalSurfaceCreateInfoExt = 1000217000
    # Provided by VK_EXT_fragment_density_map
    physicalDeviceFragmentDensityMapFeaturesExt = 1000218000
    physicalDeviceFragmentDensityMapPropertiesExt = 1000218001
    renderPassFragmentDensityMapCreateInfoExt = 1000218002
    # Provided by VK_VERSION_1_2
    physicalDeviceScalarBlockLayoutFeatures = 1000221000
    # Provided by VK_EXT_subgroup_size_control
    physicalDeviceSubgroupSizeControlPropertiesExt = 1000225000
    pipelineShaderStageRequiredSubgroupSizeCreateInfoExt = 1000225001
    physicalDeviceSubgroupSizeControlFeaturesExt = 1000225002
    # Provided by VK_AMD_shader_core_properties2
    physicalDeviceShaderCoreProperties2Amd = 1000227000
    # Provided by VK_AMD_device_coherent_memory
    physicalDeviceCoherentMemoryFeaturesAmd = 1000229000
    # Provided by VK_EXT_memory_budget
    physicalDeviceMemoryBudgetPropertiesExt = 1000237000
    # Provided by VK_EXT_memory_priority
    physicalDeviceMemoryPriorityFeaturesExt = 1000238000
    memoryPriorityAllocateInfoExt = 1000238001
    # Provided by VK_KHR_surface_protected_capabilities
    surfaceProtectedCapabilitiesKhr = 1000239000
    # Provided by VK_NV_dedicated_allocation_image_aliasing
    physicalDeviceDedicatedAllocationImageAliasingFeaturesNv = 1000240000
    # Provided by VK_VERSION_1_2
    physicalDeviceSeparateDepthStencilLayoutsFeatures = 1000241000
    attachmentReferenceStencilLayout = 1000241001
    attachmentDescriptionStencilLayout = 1000241002
    # Provided by VK_EXT_buffer_device_address
    physicalDeviceBufferDeviceAddressFeaturesExt = 1000244000
    # Provided by VK_VERSION_1_2
    bufferDeviceAddressInfo = 1000244001
    # Provided by VK_EXT_buffer_device_address
    bufferDeviceAddressCreateInfoExt = 1000244002
    # Provided by VK_EXT_tooling_info
    physicalDeviceToolPropertiesExt = 1000245000
    # Provided by VK_VERSION_1_2
    imageStencilUsageCreateInfo = 1000246000
    # Provided by VK_EXT_validation_features
    validationFeaturesExt = 1000247000
    # Provided by VK_NV_cooperative_matrix
    physicalDeviceCooperativeMatrixFeaturesNv = 1000249000
    cooperativeMatrixPropertiesNv = 1000249001
    physicalDeviceCooperativeMatrixPropertiesNv = 1000249002
    # Provided by VK_NV_coverage_reduction_mode
    physicalDeviceCoverageReductionModeFeaturesNv = 1000250000
    pipelineCoverageReductionStateCreateInfoNv = 1000250001
    framebufferMixedSamplesCombinationNv = 1000250002
    # Provided by VK_EXT_fragment_shader_interlock
    physicalDeviceFragmentShaderInterlockFeaturesExt = 1000251000
    # Provided by VK_EXT_ycbcr_image_arrays
    physicalDeviceYcbcrImageArraysFeaturesExt = 1000252000
    # Provided by VK_VERSION_1_2
    physicalDeviceUniformBufferStandardLayoutFeatures = 1000253000
    # Provided by VK_EXT_full_screen_exclusive
    surfaceFullScreenExclusiveInfoExt = 1000255000
    surfaceFullScreenExclusiveWin32InfoExt = 1000255001
    surfaceCapabilitiesFullScreenExclusiveExt = 1000255002
    # Provided by VK_EXT_headless_surface
    headlessSurfaceCreateInfoExt = 1000256000
    # Provided by VK_VERSION_1_2
    physicalDeviceBufferDeviceAddressFeatures = 1000257000
    bufferOpaqueCaptureAddressCreateInfo = 1000257002
    memoryOpaqueCaptureAddressAllocateInfo = 1000257003
    deviceMemoryOpaqueCaptureAddressInfo = 1000257004
    # Provided by VK_EXT_line_rasterization
    physicalDeviceLineRasterizationFeaturesExt = 1000259000
    pipelineRasterizationLineStateCreateInfoExt = 1000259001
    physicalDeviceLineRasterizationPropertiesExt = 1000259002
    # Provided by VK_EXT_shader_atomic_float
    physicalDeviceShaderAtomicFloatFeaturesExt = 1000260000
    # Provided by VK_VERSION_1_2
    physicalDeviceHostQueryResetFeatures = 1000261000
    # Provided by VK_EXT_index_type_uint8
    physicalDeviceIndexTypeUint8FeaturesExt = 1000265000
    # Provided by VK_EXT_extended_dynamic_state
    physicalDeviceExtendedDynamicStateFeaturesExt = 1000267000
    # Provided by VK_KHR_deferred_host_operations
    deferredOperationInfoKhr = 1000268000
    # Provided by VK_KHR_pipeline_executable_properties
    physicalDevicePipelineExecutablePropertiesFeaturesKhr = 1000269000
    pipelineInfoKhr = 1000269001
    pipelineExecutablePropertiesKhr = 1000269002
    pipelineExecutableInfoKhr = 1000269003
    pipelineExecutableStatisticKhr = 1000269004
    pipelineExecutableInternalRepresentationKhr = 1000269005
    # Provided by VK_EXT_shader_demote_to_helper_invocation
    physicalDeviceShaderDemoteToHelperInvocationFeaturesExt = 1000276000
    # Provided by VK_NV_device_generated_commands
    physicalDeviceDeviceGeneratedCommandsPropertiesNv = 1000277000
    graphicsShaderGroupCreateInfoNv = 1000277001
    graphicsPipelineShaderGroupsCreateInfoNv = 1000277002
    indirectCommandsLayoutTokenNv = 1000277003
    indirectCommandsLayoutCreateInfoNv = 1000277004
    generatedCommandsInfoNv = 1000277005
    generatedCommandsMemoryRequirementsInfoNv = 1000277006
    physicalDeviceDeviceGeneratedCommandsFeaturesNv = 1000277007
    # Provided by VK_EXT_texel_buffer_alignment
    physicalDeviceTexelBufferAlignmentFeaturesExt = 1000281000
    physicalDeviceTexelBufferAlignmentPropertiesExt = 1000281001
    # Provided by VK_QCOM_render_pass_transform
    commandBufferInheritanceRenderPassTransformInfoQcom = 1000282000
    renderPassTransformBeginInfoQcom = 1000282001
    # Provided by VK_EXT_robustness2
    physicalDeviceRobustness2FeaturesExt = 1000286000
    physicalDeviceRobustness2PropertiesExt = 1000286001
    # Provided by VK_EXT_custom_border_color
    samplerCustomBorderColorCreateInfoExt = 1000287000
    physicalDeviceCustomBorderColorPropertiesExt = 1000287001
    physicalDeviceCustomBorderColorFeaturesExt = 1000287002
    # Provided by VK_KHR_pipeline_library
    pipelineLibraryCreateInfoKhr = 1000290000
    # Provided by VK_EXT_private_data
    physicalDevicePrivateDataFeaturesExt = 1000295000
    devicePrivateDataCreateInfoExt = 1000295001
    privateDataSlotCreateInfoExt = 1000295002
    # Provided by VK_EXT_pipeline_creation_cache_control
    physicalDevicePipelineCreationCacheControlFeaturesExt = 1000297000
    # Provided by VK_NV_device_diagnostics_config
    physicalDeviceDiagnosticsConfigFeaturesNv = 1000300000
    deviceDiagnosticsConfigCreateInfoNv = 1000300001
    # Provided by VK_QCOM_extension_310
    reservedQcom = 1000309000
    # Provided by VK_EXT_fragment_density_map2
    physicalDeviceFragmentDensityMap2FeaturesExt = 1000332000
    physicalDeviceFragmentDensityMap2PropertiesExt = 1000332001
    # Provided by VK_EXT_image_robustness
    physicalDeviceImageRobustnessFeaturesExt = 1000335000
    # Provided by VK_EXT_4444_formats
    physicalDevice4444FormatsFeaturesExt = 1000340000
    # Provided by VK_EXT_directfb_surface
    directfbSurfaceCreateInfoExt = 1000346000
  # Enums to track objects of various types
  ObjectType* {.vkEnum.} = enum
    unknown = 0
    instance = 1 # VkInstance
    physicalDevice = 2 # VkPhysicalDevice
    device = 3 # VkDevice
    queue = 4 # VkQueue
    semaphore = 5 # VkSemaphore
    commandBuffer = 6 # VkCommandBuffer
    fence = 7 # VkFence
    deviceMemory = 8 # VkDeviceMemory
    buffer = 9 # VkBuffer
    image = 10 # VkImage
    event = 11 # VkEvent
    queryPool = 12 # VkQueryPool
    bufferView = 13 # VkBufferView
    imageView = 14 # VkImageView
    shaderModule = 15 # VkShaderModule
    pipelineCache = 16 # VkPipelineCache
    pipelineLayout = 17 # VkPipelineLayout
    renderPass = 18 # VkRenderPass
    pipeline = 19 # VkPipeline
    descriptorSetLayout = 20 # VkDescriptorSetLayout
    sampler = 21 # VkSampler
    descriptorPool = 22 # VkDescriptorPool
    descriptorSet = 23 # VkDescriptorSet
    framebuffer = 24 # VkFramebuffer
    commandPool = 25 # VkCommandPool
    # Provided by VK_KHR_surface
    surfaceKhr = 1000000000 # VkSurfaceKHR
    # Provided by VK_KHR_swapchain
    swapchainKhr = 1000001000 # VkSwapchainKHR
    # Provided by VK_KHR_display
    displayKhr = 1000002000 # VkDisplayKHR
    displayModeKhr = 1000002001 # VkDisplayModeKHR
    # Provided by VK_EXT_debug_report
    debugReportCallbackExt = 1000011000 # VkDebugReportCallbackEXT
    # Provided by VK_VERSION_1_1
    descriptorUpdateTemplate = 1000085000
    # Provided by VK_EXT_debug_utils
    debugUtilsMessengerExt = 1000128000 # VkDebugUtilsMessengerEXT
    # Provided by VK_VERSION_1_1
    samplerYcbcrConversion = 1000156000
    # Provided by VK_EXT_validation_cache
    validationCacheExt = 1000160000 # VkValidationCacheEXT
    # Provided by VK_KHR_ray_tracing
    accelerationStructureKhr = 1000165000
    # Provided by VK_INTEL_performance_query
    performanceConfigurationIntel = 1000210000
    # Provided by VK_KHR_deferred_host_operations
    deferredOperationKhr = 1000268000
    # Provided by VK_NV_device_generated_commands
    indirectCommandsLayoutNv = 1000277000 # VkIndirectCommandsLayoutNV
    # Provided by VK_EXT_private_data
    privateDataSlotExt = 1000295000
  VendorId* {.vkEnum.} = enum
    viv = 0x00010001 # Vivante vendor ID
    vsi = 0x00010002 # VeriSilicon vendor ID
    kazan = 0x00010003 # Kazan Software Renderer
    codeplay = 0x00010004 # Codeplay Software Ltd. vendor ID
    mesa = 0x00010005 # Mesa vendor ID
  PipelineCacheHeaderVersion* {.vkEnum.} = enum
    one = 1
  # Vulkan format definitions
  Format* {.vkEnum.} = enum
    undefined = 0
    r4g4UnormPack8 = 1
    r4g4b4a4UnormPack16 = 2
    b4g4r4a4UnormPack16 = 3
    r5g6b5UnormPack16 = 4
    b5g6r5UnormPack16 = 5
    r5g5b5a1UnormPack16 = 6
    b5g5r5a1UnormPack16 = 7
    a1r5g5b5UnormPack16 = 8
    r8Unorm = 9
    r8Snorm = 10
    r8Uscaled = 11
    r8Sscaled = 12
    r8Uint = 13
    r8Sint = 14
    r8Srgb = 15
    r8g8Unorm = 16
    r8g8Snorm = 17
    r8g8Uscaled = 18
    r8g8Sscaled = 19
    r8g8Uint = 20
    r8g8Sint = 21
    r8g8Srgb = 22
    r8g8b8Unorm = 23
    r8g8b8Snorm = 24
    r8g8b8Uscaled = 25
    r8g8b8Sscaled = 26
    r8g8b8Uint = 27
    r8g8b8Sint = 28
    r8g8b8Srgb = 29
    b8g8r8Unorm = 30
    b8g8r8Snorm = 31
    b8g8r8Uscaled = 32
    b8g8r8Sscaled = 33
    b8g8r8Uint = 34
    b8g8r8Sint = 35
    b8g8r8Srgb = 36
    r8g8b8a8Unorm = 37
    r8g8b8a8Snorm = 38
    r8g8b8a8Uscaled = 39
    r8g8b8a8Sscaled = 40
    r8g8b8a8Uint = 41
    r8g8b8a8Sint = 42
    r8g8b8a8Srgb = 43
    b8g8r8a8Unorm = 44
    b8g8r8a8Snorm = 45
    b8g8r8a8Uscaled = 46
    b8g8r8a8Sscaled = 47
    b8g8r8a8Uint = 48
    b8g8r8a8Sint = 49
    b8g8r8a8Srgb = 50
    a8b8g8r8UnormPack32 = 51
    a8b8g8r8SnormPack32 = 52
    a8b8g8r8UscaledPack32 = 53
    a8b8g8r8SscaledPack32 = 54
    a8b8g8r8UintPack32 = 55
    a8b8g8r8SintPack32 = 56
    a8b8g8r8SrgbPack32 = 57
    a2r10g10b10UnormPack32 = 58
    a2r10g10b10SnormPack32 = 59
    a2r10g10b10UscaledPack32 = 60
    a2r10g10b10SscaledPack32 = 61
    a2r10g10b10UintPack32 = 62
    a2r10g10b10SintPack32 = 63
    a2b10g10r10UnormPack32 = 64
    a2b10g10r10SnormPack32 = 65
    a2b10g10r10UscaledPack32 = 66
    a2b10g10r10SscaledPack32 = 67
    a2b10g10r10UintPack32 = 68
    a2b10g10r10SintPack32 = 69
    r16Unorm = 70
    r16Snorm = 71
    r16Uscaled = 72
    r16Sscaled = 73
    r16Uint = 74
    r16Sint = 75
    r16Sfloat = 76
    r16g16Unorm = 77
    r16g16Snorm = 78
    r16g16Uscaled = 79
    r16g16Sscaled = 80
    r16g16Uint = 81
    r16g16Sint = 82
    r16g16Sfloat = 83
    r16g16b16Unorm = 84
    r16g16b16Snorm = 85
    r16g16b16Uscaled = 86
    r16g16b16Sscaled = 87
    r16g16b16Uint = 88
    r16g16b16Sint = 89
    r16g16b16Sfloat = 90
    r16g16b16a16Unorm = 91
    r16g16b16a16Snorm = 92
    r16g16b16a16Uscaled = 93
    r16g16b16a16Sscaled = 94
    r16g16b16a16Uint = 95
    r16g16b16a16Sint = 96
    r16g16b16a16Sfloat = 97
    r32Uint = 98
    r32Sint = 99
    r32Sfloat = 100
    r32g32Uint = 101
    r32g32Sint = 102
    r32g32Sfloat = 103
    r32g32b32Uint = 104
    r32g32b32Sint = 105
    r32g32b32Sfloat = 106
    r32g32b32a32Uint = 107
    r32g32b32a32Sint = 108
    r32g32b32a32Sfloat = 109
    r64Uint = 110
    r64Sint = 111
    r64Sfloat = 112
    r64g64Uint = 113
    r64g64Sint = 114
    r64g64Sfloat = 115
    r64g64b64Uint = 116
    r64g64b64Sint = 117
    r64g64b64Sfloat = 118
    r64g64b64a64Uint = 119
    r64g64b64a64Sint = 120
    r64g64b64a64Sfloat = 121
    b10g11r11UfloatPack32 = 122
    e5b9g9r9UfloatPack32 = 123
    d16Unorm = 124
    x8D24UnormPack32 = 125
    d32Sfloat = 126
    s8Uint = 127
    d16UnormS8Uint = 128
    d24UnormS8Uint = 129
    d32SfloatS8Uint = 130
    bc1RgbUnormBlock = 131
    bc1RgbSrgbBlock = 132
    bc1RgbaUnormBlock = 133
    bc1RgbaSrgbBlock = 134
    bc2UnormBlock = 135
    bc2SrgbBlock = 136
    bc3UnormBlock = 137
    bc3SrgbBlock = 138
    bc4UnormBlock = 139
    bc4SnormBlock = 140
    bc5UnormBlock = 141
    bc5SnormBlock = 142
    bc6hUfloatBlock = 143
    bc6hSfloatBlock = 144
    bc7UnormBlock = 145
    bc7SrgbBlock = 146
    etc2R8g8b8UnormBlock = 147
    etc2R8g8b8SrgbBlock = 148
    etc2R8g8b8a1UnormBlock = 149
    etc2R8g8b8a1SrgbBlock = 150
    etc2R8g8b8a8UnormBlock = 151
    etc2R8g8b8a8SrgbBlock = 152
    eacR11UnormBlock = 153
    eacR11SnormBlock = 154
    eacR11g11UnormBlock = 155
    eacR11g11SnormBlock = 156
    astc4x4UnormBlock = 157
    astc4x4SrgbBlock = 158
    astc5x4UnormBlock = 159
    astc5x4SrgbBlock = 160
    astc5x5UnormBlock = 161
    astc5x5SrgbBlock = 162
    astc6x5UnormBlock = 163
    astc6x5SrgbBlock = 164
    astc6x6UnormBlock = 165
    astc6x6SrgbBlock = 166
    astc8x5UnormBlock = 167
    astc8x5SrgbBlock = 168
    astc8x6UnormBlock = 169
    astc8x6SrgbBlock = 170
    astc8x8UnormBlock = 171
    astc8x8SrgbBlock = 172
    astc10x5UnormBlock = 173
    astc10x5SrgbBlock = 174
    astc10x6UnormBlock = 175
    astc10x6SrgbBlock = 176
    astc10x8UnormBlock = 177
    astc10x8SrgbBlock = 178
    astc10x10UnormBlock = 179
    astc10x10SrgbBlock = 180
    astc12x10UnormBlock = 181
    astc12x10SrgbBlock = 182
    astc12x12UnormBlock = 183
    astc12x12SrgbBlock = 184
    # Provided by VK_IMG_format_pvrtc
    pvrtc12bppUnormBlockImg = 1000054000
    pvrtc14bppUnormBlockImg = 1000054001
    pvrtc22bppUnormBlockImg = 1000054002
    pvrtc24bppUnormBlockImg = 1000054003
    pvrtc12bppSrgbBlockImg = 1000054004
    pvrtc14bppSrgbBlockImg = 1000054005
    pvrtc22bppSrgbBlockImg = 1000054006
    pvrtc24bppSrgbBlockImg = 1000054007
    # Provided by VK_EXT_texture_compression_astc_hdr
    astc4x4SfloatBlockExt = 1000066000
    astc5x4SfloatBlockExt = 1000066001
    astc5x5SfloatBlockExt = 1000066002
    astc6x5SfloatBlockExt = 1000066003
    astc6x6SfloatBlockExt = 1000066004
    astc8x5SfloatBlockExt = 1000066005
    astc8x6SfloatBlockExt = 1000066006
    astc8x8SfloatBlockExt = 1000066007
    astc10x5SfloatBlockExt = 1000066008
    astc10x6SfloatBlockExt = 1000066009
    astc10x8SfloatBlockExt = 1000066010
    astc10x10SfloatBlockExt = 1000066011
    astc12x10SfloatBlockExt = 1000066012
    astc12x12SfloatBlockExt = 1000066013
    # Provided by VK_VERSION_1_1
    g8b8g8r8422Unorm = 1000156000
    b8g8r8g8422Unorm = 1000156001
    g8B8R83plane420Unorm = 1000156002
    g8B8r82plane420Unorm = 1000156003
    g8B8R83plane422Unorm = 1000156004
    g8B8r82plane422Unorm = 1000156005
    g8B8R83plane444Unorm = 1000156006
    r10x6UnormPack16 = 1000156007
    r10x6g10x6Unorm2pack16 = 1000156008
    r10x6g10x6b10x6a10x6Unorm4pack16 = 1000156009
    g10x6b10x6g10x6r10x6422Unorm4pack16 = 1000156010
    b10x6g10x6r10x6g10x6422Unorm4pack16 = 1000156011
    g10x6B10x6R10x63plane420Unorm3pack16 = 1000156012
    g10x6B10x6r10x62plane420Unorm3pack16 = 1000156013
    g10x6B10x6R10x63plane422Unorm3pack16 = 1000156014
    g10x6B10x6r10x62plane422Unorm3pack16 = 1000156015
    g10x6B10x6R10x63plane444Unorm3pack16 = 1000156016
    r12x4UnormPack16 = 1000156017
    r12x4g12x4Unorm2pack16 = 1000156018
    r12x4g12x4b12x4a12x4Unorm4pack16 = 1000156019
    g12x4b12x4g12x4r12x4422Unorm4pack16 = 1000156020
    b12x4g12x4r12x4g12x4422Unorm4pack16 = 1000156021
    g12x4B12x4R12x43plane420Unorm3pack16 = 1000156022
    g12x4B12x4r12x42plane420Unorm3pack16 = 1000156023
    g12x4B12x4R12x43plane422Unorm3pack16 = 1000156024
    g12x4B12x4r12x42plane422Unorm3pack16 = 1000156025
    g12x4B12x4R12x43plane444Unorm3pack16 = 1000156026
    g16b16g16r16422Unorm = 1000156027
    b16g16r16g16422Unorm = 1000156028
    g16B16R163plane420Unorm = 1000156029
    g16B16r162plane420Unorm = 1000156030
    g16B16R163plane422Unorm = 1000156031
    g16B16r162plane422Unorm = 1000156032
    g16B16R163plane444Unorm = 1000156033
    # Provided by VK_EXT_extension_289
    astc3x3x3UnormBlockExt = 1000288000
    astc3x3x3SrgbBlockExt = 1000288001
    astc3x3x3SfloatBlockExt = 1000288002
    astc4x3x3UnormBlockExt = 1000288003
    astc4x3x3SrgbBlockExt = 1000288004
    astc4x3x3SfloatBlockExt = 1000288005
    astc4x4x3UnormBlockExt = 1000288006
    astc4x4x3SrgbBlockExt = 1000288007
    astc4x4x3SfloatBlockExt = 1000288008
    astc4x4x4UnormBlockExt = 1000288009
    astc4x4x4SrgbBlockExt = 1000288010
    astc4x4x4SfloatBlockExt = 1000288011
    astc5x4x4UnormBlockExt = 1000288012
    astc5x4x4SrgbBlockExt = 1000288013
    astc5x4x4SfloatBlockExt = 1000288014
    astc5x5x4UnormBlockExt = 1000288015
    astc5x5x4SrgbBlockExt = 1000288016
    astc5x5x4SfloatBlockExt = 1000288017
    astc5x5x5UnormBlockExt = 1000288018
    astc5x5x5SrgbBlockExt = 1000288019
    astc5x5x5SfloatBlockExt = 1000288020
    astc6x5x5UnormBlockExt = 1000288021
    astc6x5x5SrgbBlockExt = 1000288022
    astc6x5x5SfloatBlockExt = 1000288023
    astc6x6x5UnormBlockExt = 1000288024
    astc6x6x5SrgbBlockExt = 1000288025
    astc6x6x5SfloatBlockExt = 1000288026
    astc6x6x6UnormBlockExt = 1000288027
    astc6x6x6SrgbBlockExt = 1000288028
    astc6x6x6SfloatBlockExt = 1000288029
    # Provided by VK_EXT_4444_formats
    a4r4g4b4UnormPack16Ext = 1000340000
    a4b4g4r4UnormPack16Ext = 1000340001
  FormatFeatureFlagBits* {.vkFlagBits.} = enum
    sampledImage = 0x00000001 # Format can be used for sampled images (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
    storageImage = 0x00000002 # Format can be used for storage images (STORAGE_IMAGE descriptor type)
    storageImageAtomic = 0x00000004 # Format supports atomic operations in case it is used for storage images
    uniformTexelBuffer = 0x00000008 # Format can be used for uniform texel buffers (TBOs)
    storageTexelBuffer = 0x00000010 # Format can be used for storage texel buffers (IBOs)
    storageTexelBufferAtomic = 0x00000020 # Format supports atomic operations in case it is used for storage texel buffers
    vertexBuffer = 0x00000040 # Format can be used for vertex buffers (VBOs)
    colorAttachment = 0x00000080 # Format can be used for color attachment images
    colorAttachmentBlend = 0x00000100 # Format supports blending in case it is used for color attachment images
    depthStencilAttachment = 0x00000200 # Format can be used for depth/stencil attachment images
    blitSrc = 0x00000400 # Format can be used as the source image of blits with vkCmdBlitImage
    blitDst = 0x00000800 # Format can be used as the destination image of blits with vkCmdBlitImage
    sampledImageFilterLinear = 0x00001000 # Format can be filtered with VK_FILTER_LINEAR when being sampled
    # Provided by VK_IMG_filter_cubic
    sampledImageFilterCubicImg = 0x00002000 # Format can be filtered with VK_FILTER_CUBIC_IMG when being sampled
    # Provided by VK_VERSION_1_1
    transferSrc = 0x00004000 # Format can be used as the source image of image transfer commands
    transferDst = 0x00008000 # Format can be used as the destination image of image transfer commands
    # Provided by VK_VERSION_1_2
    sampledImageFilterMinmax = 0x00010000 # Format can be used with min/max reduction filtering
    # Provided by VK_VERSION_1_1
    midpointChromaSamples = 0x00020000 # Format can have midpoint rather than cosited chroma samples
    sampledImageYcbcrConversionLinearFilter = 0x00040000 # Format can be used with linear filtering whilst color conversion is enabled
    sampledImageYcbcrConversionSeparateReconstructionFilter = 0x00080000 # Format can have different chroma, min and mag filters
    sampledImageYcbcrConversionChromaReconstructionExplicit = 0x00100000
    sampledImageYcbcrConversionChromaReconstructionExplicitForceable = 0x00200000
    disjoint = 0x00400000 # Format supports disjoint planes
    cositedChromaSamples = 0x00800000 # Format can have cosited rather than midpoint chroma samples
    # Provided by VK_EXT_fragment_density_map
    fragmentDensityMapExt = 0x01000000
    # Provided by VK_AMD_extension_25
    reserved25Khr = 0x02000000
    reserved26Khr = 0x04000000
    # Provided by VK_AMD_extension_24
    reserved27Khr = 0x08000000
    reserved28Khr = 0x10000000
    # Provided by VK_KHR_ray_tracing
    accelerationStructureVertexBufferKhr = 0x20000000
    # Provided by VK_AMD_extension_227
    amdReserved30 = 0x40000000
  FormatFeatureFlags* = Flags[FormatFeatureFlagBits]
  ImageCreateFlagBits* {.vkFlagBits.} = enum
    sparseBinding = 0x00000001 # Image should support sparse backing
    sparseResidency = 0x00000002 # Image should support sparse backing with partial residency
    sparseAliased = 0x00000004 # Image should support constent data access to physical memory ranges mapped into multiple locations of sparse images
    mutableFormat = 0x00000008 # Allows image views to have different format than the base image
    cubeCompatible = 0x00000010 # Allows creating image views with cube type from the created image
    # Provided by VK_VERSION_1_1
    e2dArrayCompatible = 0x00000020 # The 3D image can be viewed as a 2D or 2D array image
    splitInstanceBindRegions = 0x00000040 # Allows using VkBindImageMemoryDeviceGroupInfo::pSplitInstanceBindRegions when binding memory to the image
    blockTexelViewCompatible = 0x00000080
    extendedUsage = 0x00000100
    disjoint = 0x00000200
    alias = 0x00000400
    protected = 0x00000800 # Image requires protected memory
    # Provided by VK_EXT_sample_locations
    sampleLocationsCompatibleDepthExt = 0x00001000
    # Provided by VK_NV_corner_sampled_image
    cornerSampledNv = 0x00002000
    # Provided by VK_EXT_fragment_density_map
    subsampledExt = 0x00004000
  ImageCreateFlags* = Flags[ImageCreateFlagBits]
  ImageTiling* {.vkEnum.} = enum
    optimal = 0
    linear = 1
    # Provided by VK_EXT_image_drm_format_modifier
    drmFormatModifierExt = 1000158000
  ImageType* {.vkEnum.} = enum
    e1d = 0
    e2d = 1
    e3d = 2
  ImageUsageFlagBits* {.vkFlagBits.} = enum
    transferSrc = 0x00000001 # Can be used as a source of transfer operations
    transferDst = 0x00000002 # Can be used as a destination of transfer operations
    sampled = 0x00000004 # Can be sampled from (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
    storage = 0x00000008 # Can be used as storage image (STORAGE_IMAGE descriptor type)
    colorAttachment = 0x00000010 # Can be used as framebuffer color attachment
    depthStencilAttachment = 0x00000020 # Can be used as framebuffer depth/stencil attachment
    transientAttachment = 0x00000040 # Image data not needed outside of rendering
    inputAttachment = 0x00000080 # Can be used as framebuffer input attachment
    # Provided by VK_NV_shading_rate_image
    shadingRateImageNv = 0x00000100
    # Provided by VK_EXT_fragment_density_map
    fragmentDensityMapExt = 0x00000200
    # Provided by VK_AMD_extension_25
    reserved10Khr = 0x00000400
    reserved11Khr = 0x00000800
    reserved12Khr = 0x00001000
    # Provided by VK_AMD_extension_24
    reserved13Khr = 0x00002000
    reserved14Khr = 0x00004000
    reserved15Khr = 0x00008000
    # Provided by VK_QCOM_extension_173
    reserved16Qcom = 0x00010000
    reserved17Qcom = 0x00020000
  ImageUsageFlags* = Flags[ImageUsageFlagBits]
  InstanceCreateFlags* = Flags[distinct UnusedEnum]
  InternalAllocationType* {.vkEnum.} = enum
    executable = 0
  MemoryHeapFlagBits* {.vkFlagBits.} = enum
    deviceLocal = 0x00000001 # If set, heap represents device memory
    # Provided by VK_VERSION_1_1
    multiInstance = 0x00000002 # If set, heap allocations allocate multiple instances by default
    # Provided by VK_KHR_extension_309
    reserved2Khr = 0x00000004
  MemoryHeapFlags* = Flags[MemoryHeapFlagBits]
  MemoryPropertyFlagBits* {.vkFlagBits.} = enum
    deviceLocal = 0x00000001 # If otherwise stated, then allocate memory on device
    hostVisible = 0x00000002 # Memory is mappable by host
    hostCoherent = 0x00000004 # Memory will have i/o coherency. If not set, application may need to use vkFlushMappedMemoryRanges and vkInvalidateMappedMemoryRanges to flush/invalidate host cache
    hostCached = 0x00000008 # Memory will be cached by the host
    lazilyAllocated = 0x00000010 # Memory may be allocated by the driver when it is required
    # Provided by VK_VERSION_1_1
    protected = 0x00000020 # Memory is protected
    # Provided by VK_AMD_device_coherent_memory
    deviceCoherentAmd = 0x00000040
    deviceUncachedAmd = 0x00000080
  MemoryPropertyFlags* = Flags[MemoryPropertyFlagBits]
  PhysicalDeviceType* {.vkEnum.} = enum
    other = 0
    integratedGpu = 1
    discreteGpu = 2
    virtualGpu = 3
    cpu = 4
  QueueFlagBits* {.vkFlagBits.} = enum
    graphics = 0x00000001 # Queue supports graphics operations
    compute = 0x00000002 # Queue supports compute operations
    transfer = 0x00000004 # Queue supports transfer operations
    sparseBinding = 0x00000008 # Queue supports sparse resource memory management operations
    # Provided by VK_VERSION_1_1
    protected = 0x00000010 # Queues may support protected operations
    # Provided by VK_AMD_extension_25
    reserved5Khr = 0x00000020
    # Provided by VK_AMD_extension_24
    reserved6Khr = 0x00000040
  QueueFlags* = Flags[QueueFlagBits]
  SampleCountFlagBits* {.vkFlagBits.} = enum
    e1 = 0x00000001 # Sample count 1 supported
    e2 = 0x00000002 # Sample count 2 supported
    e4 = 0x00000004 # Sample count 4 supported
    e8 = 0x00000008 # Sample count 8 supported
    e16 = 0x00000010 # Sample count 16 supported
    e32 = 0x00000020 # Sample count 32 supported
    e64 = 0x00000040 # Sample count 64 supported
  SampleCountFlags* = Flags[SampleCountFlagBits]
  SystemAllocationScope* {.vkEnum.} = enum
    command = 0
    `object` = 1
    cache = 2
    device = 3
    instance = 4
  DeviceCreateFlags* = Flags[distinct UnusedEnum]
  DeviceQueueCreateFlagBits* {.vkFlagBits.} = enum
    # Provided by VK_VERSION_1_1
    protected = 0x00000001 # Queue is a protected-capable device queue
  DeviceQueueCreateFlags* = Flags[DeviceQueueCreateFlagBits]
  PipelineStageFlagBits* {.vkFlagBits.} = enum
    topOfPipe = 0x00000001 # Before subsequent commands are processed
    drawIndirect = 0x00000002 # Draw/DispatchIndirect command fetch
    vertexInput = 0x00000004 # Vertex/index fetch
    vertexShader = 0x00000008 # Vertex shading
    tessellationControlShader = 0x00000010 # Tessellation control shading
    tessellationEvaluationShader = 0x00000020 # Tessellation evaluation shading
    geometryShader = 0x00000040 # Geometry shading
    fragmentShader = 0x00000080 # Fragment shading
    earlyFragmentTests = 0x00000100 # Early fragment (depth and stencil) tests
    lateFragmentTests = 0x00000200 # Late fragment (depth and stencil) tests
    colorAttachmentOutput = 0x00000400 # Color attachment writes
    computeShader = 0x00000800 # Compute shading
    transfer = 0x00001000 # Transfer/copy operations
    bottomOfPipe = 0x00002000 # After previous commands have completed
    host = 0x00004000 # Indicates host (CPU) is a source/sink of the dependency
    allGraphics = 0x00008000 # All stages of the graphics pipeline
    allCommands = 0x00010000 # All stages supported on the queue
    # Provided by VK_NV_device_generated_commands
    commandPreprocessNv = 0x00020000
    # Provided by VK_EXT_conditional_rendering
    conditionalRenderingExt = 0x00040000 # A pipeline stage for conditional rendering predicate fetch
    # Provided by VK_NV_mesh_shader
    taskShaderNv = 0x00080000
    meshShaderNv = 0x00100000
    # Provided by VK_KHR_ray_tracing
    rayTracingShaderKhr = 0x00200000
    # Provided by VK_NV_shading_rate_image
    shadingRateImageNv = 0x00400000
    # Provided by VK_EXT_fragment_density_map
    fragmentDensityProcessExt = 0x00800000
    # Provided by VK_EXT_transform_feedback
    transformFeedbackExt = 0x01000000
    # Provided by VK_KHR_ray_tracing
    accelerationStructureBuildKhr = 0x02000000
    # Provided by VK_AMD_extension_25
    reserved26Khr = 0x04000000
    # Provided by VK_AMD_extension_24
    reserved27Khr = 0x08000000
  PipelineStageFlags* = Flags[PipelineStageFlagBits]
  MemoryMapFlags* = Flags[distinct UnusedEnum]
  ImageAspectFlagBits* {.vkFlagBits.} = enum
    color = 0x00000001
    depth = 0x00000002
    stencil = 0x00000004
    metadata = 0x00000008
    # Provided by VK_VERSION_1_1
    plane0 = 0x00000010
    plane1 = 0x00000020
    plane2 = 0x00000040
    # Provided by VK_EXT_image_drm_format_modifier
    memoryPlane0Ext = 0x00000080
    memoryPlane1Ext = 0x00000100
    memoryPlane2Ext = 0x00000200
    memoryPlane3Ext = 0x00000400
  ImageAspectFlags* = Flags[ImageAspectFlagBits]
  SparseImageFormatFlagBits* {.vkFlagBits.} = enum
    singleMiptail = 0x00000001 # Image uses a single mip tail region for all array layers
    alignedMipSize = 0x00000002 # Image requires mip level dimensions to be an integer multiple of the sparse image block dimensions for non-tail mip levels.
    nonstandardBlockSize = 0x00000004 # Image uses a non-standard sparse image block dimensions
  SparseImageFormatFlags* = Flags[SparseImageFormatFlagBits]
  SparseMemoryBindFlagBits* {.vkFlagBits.} = enum
    metadata = 0x00000001 # Operation binds resource metadata to memory
  SparseMemoryBindFlags* = Flags[SparseMemoryBindFlagBits]
  FenceCreateFlagBits* {.vkFlagBits.} = enum
    signaled = 0x00000001
  FenceCreateFlags* = Flags[FenceCreateFlagBits]
  SemaphoreCreateFlags* = Flags[distinct UnusedEnum]
  EventCreateFlags* = Flags[distinct UnusedEnum]
  QueryPipelineStatisticFlagBits* {.vkFlagBits.} = enum
    inputAssemblyVertices = 0x00000001 # Optional
    inputAssemblyPrimitives = 0x00000002 # Optional
    vertexShaderInvocations = 0x00000004 # Optional
    geometryShaderInvocations = 0x00000008 # Optional
    geometryShaderPrimitives = 0x00000010 # Optional
    clippingInvocations = 0x00000020 # Optional
    clippingPrimitives = 0x00000040 # Optional
    fragmentShaderInvocations = 0x00000080 # Optional
    tessellationControlShaderPatches = 0x00000100 # Optional
    tessellationEvaluationShaderInvocations = 0x00000200 # Optional
    computeShaderInvocations = 0x00000400 # Optional
  QueryPipelineStatisticFlags* = Flags[QueryPipelineStatisticFlagBits]
  QueryPoolCreateFlags* = Flags[distinct UnusedEnum]
  QueryResultFlagBits* {.vkFlagBits.} = enum
    e64 = 0x00000001 # Results of the queries are written to the destination buffer as 64-bit values
    wait = 0x00000002 # Results of the queries are waited on before proceeding with the result copy
    withAvailability = 0x00000004 # Besides the results of the query, the availability of the results is also written
    partial = 0x00000008 # Copy the partial results of the query even if the final results are not available
  QueryResultFlags* = Flags[QueryResultFlagBits]
  QueryType* {.vkEnum.} = enum
    occlusion = 0
    pipelineStatistics = 1 # Optional
    timestamp = 2
    # Provided by VK_AMD_extension_24
    reserved8 = 1000023008
    # Provided by VK_AMD_extension_25
    reserved4 = 1000024004
    # Provided by VK_EXT_transform_feedback
    transformFeedbackStreamExt = 1000028004
    # Provided by VK_KHR_performance_query
    performanceQueryKhr = 1000116000
    # Provided by VK_KHR_ray_tracing
    accelerationStructureSerializationSizeKhr = 1000150000
    accelerationStructureCompactedSizeKhr = 1000165000
    # Provided by VK_INTEL_performance_query
    performanceQueryIntel = 1000210000
  BufferCreateFlagBits* {.vkFlagBits.} = enum
    sparseBinding = 0x00000001 # Buffer should support sparse backing
    sparseResidency = 0x00000002 # Buffer should support sparse backing with partial residency
    sparseAliased = 0x00000004 # Buffer should support constent data access to physical memory ranges mapped into multiple locations of sparse buffers
    # Provided by VK_VERSION_1_1
    protected = 0x00000008 # Buffer requires protected memory
    # Provided by VK_VERSION_1_2
    deviceAddressCaptureReplay = 0x00000010
  BufferCreateFlags* = Flags[BufferCreateFlagBits]
  BufferUsageFlagBits* {.vkFlagBits.} = enum
    transferSrc = 0x00000001 # Can be used as a source of transfer operations
    transferDst = 0x00000002 # Can be used as a destination of transfer operations
    uniformTexelBuffer = 0x00000004 # Can be used as TBO
    storageTexelBuffer = 0x00000008 # Can be used as IBO
    uniformBuffer = 0x00000010 # Can be used as UBO
    storageBuffer = 0x00000020 # Can be used as SSBO
    indexBuffer = 0x00000040 # Can be used as source of fixed-function index fetch (index buffer)
    vertexBuffer = 0x00000080 # Can be used as source of fixed-function vertex fetch (VBO)
    indirectBuffer = 0x00000100 # Can be the source of indirect parameters (e.g. indirect buffer, parameter buffer)
    # Provided by VK_EXT_conditional_rendering
    conditionalRenderingExt = 0x00000200 # Specifies the buffer can be used as predicate in conditional rendering
    # Provided by VK_KHR_ray_tracing
    rayTracingKhr = 0x00000400
    # Provided by VK_EXT_transform_feedback
    transformFeedbackBufferExt = 0x00000800
    transformFeedbackCounterBufferExt = 0x00001000
    # Provided by VK_AMD_extension_25
    reserved13Khr = 0x00002000
    reserved14Khr = 0x00004000
    # Provided by VK_AMD_extension_24
    reserved15Khr = 0x00008000
    reserved16Khr = 0x00010000
    # Provided by VK_VERSION_1_2
    shaderDeviceAddress = 0x00020000
    # Provided by VK_QCOM_extension_173
    reserved18Qcom = 0x00040000
    # Provided by VK_NV_extension_168
    reserved19Khr = 0x00080000
    reserved20Khr = 0x00100000
  BufferUsageFlags* = Flags[BufferUsageFlagBits]
  SharingMode* {.vkEnum.} = enum
    exclusive = 0
    concurrent = 1
  BufferViewCreateFlags* = Flags[distinct UnusedEnum]
  ImageLayout* {.vkEnum.} = enum
    undefined = 0 # Implicit layout an image is when its contents are undefined due to various reasons (e.g. right after creation)
    general = 1 # General layout when image can be used for any kind of access
    colorAttachmentOptimal = 2 # Optimal layout when image is only used for color attachment read/write
    depthStencilAttachmentOptimal = 3 # Optimal layout when image is only used for depth/stencil attachment read/write
    depthStencilReadOnlyOptimal = 4 # Optimal layout when image is used for read only depth/stencil attachment and shader access
    shaderReadOnlyOptimal = 5 # Optimal layout when image is used for read only shader access
    transferSrcOptimal = 6 # Optimal layout when image is used only as source of transfer operations
    transferDstOptimal = 7 # Optimal layout when image is used only as destination of transfer operations
    preinitialized = 8 # Initial layout used when the data is populated by the CPU
    # Provided by VK_KHR_swapchain
    presentSrcKhr = 1000001002
    # Provided by VK_KHR_shared_presentable_image
    sharedPresentKhr = 1000111000
    # Provided by VK_VERSION_1_1
    depthReadOnlyStencilAttachmentOptimal = 1000117000
    depthAttachmentStencilReadOnlyOptimal = 1000117001
    # Provided by VK_NV_shading_rate_image
    shadingRateOptimalNv = 1000164003
    # Provided by VK_EXT_fragment_density_map
    fragmentDensityMapOptimalExt = 1000218000
    # Provided by VK_VERSION_1_2
    depthAttachmentOptimal = 1000241000
    depthReadOnlyOptimal = 1000241001
    stencilAttachmentOptimal = 1000241002
    stencilReadOnlyOptimal = 1000241003
  ComponentSwizzle* {.vkEnum.} = enum
    identity = 0
    zero = 1
    one = 2
    r = 3
    g = 4
    b = 5
    a = 6
  ImageViewCreateFlagBits* {.vkFlagBits.} = enum
    # Provided by VK_EXT_fragment_density_map
    fragmentDensityMapDynamicExt = 0x00000001
    # Provided by VK_EXT_fragment_density_map2
    fragmentDensityMapDeferredExt = 0x00000002
  ImageViewCreateFlags* = Flags[ImageViewCreateFlagBits]
  ImageViewType* {.vkEnum.} = enum
    e1d = 0
    e2d = 1
    e3d = 2
    cube = 3
    e1dArray = 4
    e2dArray = 5
    cubeArray = 6
  ShaderModuleCreateFlagBits* {.vkFlagBits.} = enum
    # Provided by VK_NV_extension_52
    reserved0Nv = 0x00000001
  ShaderModuleCreateFlags* = Flags[ShaderModuleCreateFlagBits]
  PipelineCacheCreateFlagBits* {.vkFlagBits.} = enum
    # Provided by VK_EXT_pipeline_creation_cache_control
    externallySynchronizedExt = 0x00000001
    # Provided by VK_GOOGLE_extension_196
    reserved1Ext = 0x00000002
  PipelineCacheCreateFlags* = Flags[PipelineCacheCreateFlagBits]
  BlendFactor* {.vkEnum.} = enum
    zero = 0
    one = 1
    srcColor = 2
    oneMinusSrcColor = 3
    dstColor = 4
    oneMinusDstColor = 5
    srcAlpha = 6
    oneMinusSrcAlpha = 7
    dstAlpha = 8
    oneMinusDstAlpha = 9
    constantColor = 10
    oneMinusConstantColor = 11
    constantAlpha = 12
    oneMinusConstantAlpha = 13
    srcAlphaSaturate = 14
    src1Color = 15
    oneMinusSrc1Color = 16
    src1Alpha = 17
    oneMinusSrc1Alpha = 18
  BlendOp* {.vkEnum.} = enum
    add = 0
    subtract = 1
    reverseSubtract = 2
    min = 3
    max = 4
    # Provided by VK_EXT_blend_operation_advanced
    zeroExt = 1000148000
    srcExt = 1000148001
    dstExt = 1000148002
    srcOverExt = 1000148003
    dstOverExt = 1000148004
    srcInExt = 1000148005
    dstInExt = 1000148006
    srcOutExt = 1000148007
    dstOutExt = 1000148008
    srcAtopExt = 1000148009
    dstAtopExt = 1000148010
    xorExt = 1000148011
    multiplyExt = 1000148012
    screenExt = 1000148013
    overlayExt = 1000148014
    darkenExt = 1000148015
    lightenExt = 1000148016
    colordodgeExt = 1000148017
    colorburnExt = 1000148018
    hardlightExt = 1000148019
    softlightExt = 1000148020
    differenceExt = 1000148021
    exclusionExt = 1000148022
    invertExt = 1000148023
    invertRgbExt = 1000148024
    lineardodgeExt = 1000148025
    linearburnExt = 1000148026
    vividlightExt = 1000148027
    linearlightExt = 1000148028
    pinlightExt = 1000148029
    hardmixExt = 1000148030
    hslHueExt = 1000148031
    hslSaturationExt = 1000148032
    hslColorExt = 1000148033
    hslLuminosityExt = 1000148034
    plusExt = 1000148035
    plusClampedExt = 1000148036
    plusClampedAlphaExt = 1000148037
    plusDarkerExt = 1000148038
    minusExt = 1000148039
    minusClampedExt = 1000148040
    contrastExt = 1000148041
    invertOvgExt = 1000148042
    redExt = 1000148043
    greenExt = 1000148044
    blueExt = 1000148045
  ColorComponentFlagBits* {.vkFlagBits.} = enum
    r = 0x00000001
    g = 0x00000002
    b = 0x00000004
    a = 0x00000008
  ColorComponentFlags* = Flags[ColorComponentFlagBits]
  CompareOp* {.vkEnum.} = enum
    never = 0
    less = 1
    equal = 2
    lessOrEqual = 3
    greater = 4
    notEqual = 5
    greaterOrEqual = 6
    always = 7
  CullModeFlagBits* {.vkFlagBits.} = enum
    none = 0
    front = 0x00000001
    back = 0x00000002
    frontAndBack = 0x00000003
  CullModeFlags* = Flags[CullModeFlagBits]
  DynamicState* {.vkEnum.} = enum
    viewport = 0
    scissor = 1
    lineWidth = 2
    depthBias = 3
    blendConstants = 4
    depthBounds = 5
    stencilCompareMask = 6
    stencilWriteMask = 7
    stencilReference = 8
    # Provided by VK_NV_clip_space_w_scaling
    viewportWScalingNv = 1000087000
    # Provided by VK_EXT_discard_rectangles
    discardRectangleExt = 1000099000
    # Provided by VK_EXT_sample_locations
    sampleLocationsExt = 1000143000
    # Provided by VK_NV_shading_rate_image
    viewportShadingRatePaletteNv = 1000164004
    viewportCoarseSampleOrderNv = 1000164006
    # Provided by VK_NV_scissor_exclusive
    exclusiveScissorNv = 1000205001
    # Provided by VK_EXT_line_rasterization
    lineStippleExt = 1000259000
    # Provided by VK_EXT_extended_dynamic_state
    cullModeExt = 1000267000
    frontFaceExt = 1000267001
    primitiveTopologyExt = 1000267002
    viewportWithCountExt = 1000267003
    scissorWithCountExt = 1000267004
    vertexInputBindingStrideExt = 1000267005
    depthTestEnableExt = 1000267006
    depthWriteEnableExt = 1000267007
    depthCompareOpExt = 1000267008
    depthBoundsTestEnableExt = 1000267009
    stencilTestEnableExt = 1000267010
    stencilOpExt = 1000267011
  FrontFace* {.vkEnum.} = enum
    counterClockwise = 0
    clockwise = 1
  LogicOp* {.vkEnum.} = enum
    clear = 0
    `and` = 1
    andReverse = 2
    copy = 3
    andInverted = 4
    noOp = 5
    `xor` = 6
    `or` = 7
    nor = 8
    equivalent = 9
    invert = 10
    orReverse = 11
    copyInverted = 12
    orInverted = 13
    nand = 14
    set = 15
  PipelineColorBlendStateCreateFlags* = Flags[distinct UnusedEnum]
  PipelineCreateFlagBits* {.vkFlagBits.} = enum
    disableOptimization = 0x00000001
    allowDerivatives = 0x00000002
    derivative = 0x00000004
    # Provided by VK_VERSION_1_1
    viewIndexFromDeviceIndex = 0x00000008
    dispatchBase = 0x00000010
    # Provided by VK_NV_ray_tracing
    deferCompileNv = 0x00000020
    # Provided by VK_KHR_pipeline_executable_properties
    captureStatisticsKhr = 0x00000040
    captureInternalRepresentationsKhr = 0x00000080
    # Provided by VK_EXT_pipeline_creation_cache_control
    failOnPipelineCompileRequiredExt = 0x00000100
    earlyReturnOnFailureExt = 0x00000200
    # Provided by VK_KHR_pipeline_library
    libraryKhr = 0x00000800
    # Provided by VK_KHR_ray_tracing
    rayTracingSkipTrianglesKhr = 0x00001000
    rayTracingSkipAabbsKhr = 0x00002000
    rayTracingNoNullAnyHitShadersKhr = 0x00004000
    rayTracingNoNullClosestHitShadersKhr = 0x00008000
    rayTracingNoNullMissShadersKhr = 0x00010000
    rayTracingNoNullIntersectionShadersKhr = 0x00020000
    # Provided by VK_NV_device_generated_commands
    indirectBindableNv = 0x00040000
    # Provided by VK_NV_extension_168
    reserved19Khr = 0x00080000
  PipelineCreateFlags* = Flags[PipelineCreateFlagBits]
  PipelineDepthStencilStateCreateFlags* = Flags[distinct UnusedEnum]
  PipelineDynamicStateCreateFlags* = Flags[distinct UnusedEnum]
  PipelineInputAssemblyStateCreateFlags* = Flags[distinct UnusedEnum]
  PipelineLayoutCreateFlags* = Flags[distinct UnusedEnum]
  PipelineMultisampleStateCreateFlags* = Flags[distinct UnusedEnum]
  PipelineRasterizationStateCreateFlags* = Flags[distinct UnusedEnum]
  PipelineShaderStageCreateFlagBits* {.vkFlagBits.} = enum
    # Provided by VK_EXT_subgroup_size_control
    allowVaryingSubgroupSizeExt = 0x00000001
    requireFullSubgroupsExt = 0x00000002
    # Provided by VK_NV_extension_52
    reserved2Nv = 0x00000004
    # Provided by VK_KHR_extension_297
    reserved3Khr = 0x00000008
  PipelineShaderStageCreateFlags* = Flags[PipelineShaderStageCreateFlagBits]
  PipelineTessellationStateCreateFlags* = Flags[distinct UnusedEnum]
  PipelineVertexInputStateCreateFlags* = Flags[distinct UnusedEnum]
  PipelineViewportStateCreateFlags* = Flags[distinct UnusedEnum]
  PolygonMode* {.vkEnum.} = enum
    fill = 0
    line = 1
    point = 2
    # Provided by VK_NV_fill_rectangle
    fillRectangleNv = 1000153000
  PrimitiveTopology* {.vkEnum.} = enum
    pointList = 0
    lineList = 1
    lineStrip = 2
    triangleList = 3
    triangleStrip = 4
    triangleFan = 5
    lineListWithAdjacency = 6
    lineStripWithAdjacency = 7
    triangleListWithAdjacency = 8
    triangleStripWithAdjacency = 9
    patchList = 10
  ShaderStageFlagBits* {.vkFlagBits.} = enum
    vertex = 0x00000001
    tessellationControl = 0x00000002
    tessellationEvaluation = 0x00000004
    geometry = 0x00000008
    fragment = 0x00000010
    allGraphics = 0x0000001F
    compute = 0x00000020
    # Provided by VK_NV_mesh_shader
    taskNv = 0x00000040
    meshNv = 0x00000080
    # Provided by VK_KHR_ray_tracing
    raygenKhr = 0x00000100
    anyHitKhr = 0x00000200
    closestHitKhr = 0x00000400
    missKhr = 0x00000800
    intersectionKhr = 0x00001000
    callableKhr = 0x00002000
    all = 0x7FFFFFFF
  ShaderStageFlags* = Flags[ShaderStageFlagBits]
  StencilOp* {.vkEnum.} = enum
    keep = 0
    zero = 1
    replace = 2
    incrementAndClamp = 3
    decrementAndClamp = 4
    invert = 5
    incrementAndWrap = 6
    decrementAndWrap = 7
  VertexInputRate* {.vkEnum.} = enum
    vertex = 0
    instance = 1
  BorderColor* {.vkEnum.} = enum
    floatTransparentBlack = 0
    intTransparentBlack = 1
    floatOpaqueBlack = 2
    intOpaqueBlack = 3
    floatOpaqueWhite = 4
    intOpaqueWhite = 5
    # Provided by VK_EXT_custom_border_color
    floatCustomExt = 1000287003
    intCustomExt = 1000287004
  Filter* {.vkEnum.} = enum
    nearest = 0
    linear = 1
    # Provided by VK_IMG_filter_cubic
    cubicImg = 1000015000
  SamplerAddressMode* {.vkEnum.} = enum
    repeat = 0
    mirroredRepeat = 1
    clampToEdge = 2
    clampToBorder = 3
    # Provided by VK_VERSION_1_2
    mirrorClampToEdge = 4 # No need to add an extnumber attribute, since this uses a core enum value
  SamplerCreateFlagBits* {.vkFlagBits.} = enum
    # Provided by VK_EXT_fragment_density_map
    subsampledExt = 0x00000001
    subsampledCoarseReconstructionExt = 0x00000002
  SamplerCreateFlags* = Flags[SamplerCreateFlagBits]
  SamplerMipmapMode* {.vkEnum.} = enum
    nearest = 0 # Choose nearest mip level
    linear = 1 # Linear filter between mip levels
  DescriptorPoolCreateFlagBits* {.vkFlagBits.} = enum
    freeDescriptorSet = 0x00000001 # Descriptor sets may be freed individually
    # Provided by VK_VERSION_1_2
    updateAfterBind = 0x00000002
  DescriptorPoolCreateFlags* = Flags[DescriptorPoolCreateFlagBits]
  DescriptorPoolResetFlags* = Flags[distinct UnusedEnum]
  DescriptorSetLayoutCreateFlagBits* {.vkFlagBits.} = enum
    # Provided by VK_KHR_push_descriptor
    pushDescriptorKhr = 0x00000001 # Descriptors are pushed via flink:vkCmdPushDescriptorSetKHR
    # Provided by VK_VERSION_1_2
    updateAfterBindPool = 0x00000002
  DescriptorSetLayoutCreateFlags* = Flags[DescriptorSetLayoutCreateFlagBits]
  DescriptorType* {.vkEnum.} = enum
    sampler = 0
    combinedImageSampler = 1
    sampledImage = 2
    storageImage = 3
    uniformTexelBuffer = 4
    storageTexelBuffer = 5
    uniformBuffer = 6
    storageBuffer = 7
    uniformBufferDynamic = 8
    storageBufferDynamic = 9
    inputAttachment = 10
    # Provided by VK_EXT_inline_uniform_block
    inlineUniformBlockExt = 1000138000
    # Provided by VK_KHR_ray_tracing
    accelerationStructureKhr = 1000165000
  AccessFlagBits* {.vkFlagBits.} = enum
    indirectCommandRead = 0x00000001 # Controls coherency of indirect command reads
    indexRead = 0x00000002 # Controls coherency of index reads
    vertexAttributeRead = 0x00000004 # Controls coherency of vertex attribute reads
    uniformRead = 0x00000008 # Controls coherency of uniform buffer reads
    inputAttachmentRead = 0x00000010 # Controls coherency of input attachment reads
    shaderRead = 0x00000020 # Controls coherency of shader reads
    shaderWrite = 0x00000040 # Controls coherency of shader writes
    colorAttachmentRead = 0x00000080 # Controls coherency of color attachment reads
    colorAttachmentWrite = 0x00000100 # Controls coherency of color attachment writes
    depthStencilAttachmentRead = 0x00000200 # Controls coherency of depth/stencil attachment reads
    depthStencilAttachmentWrite = 0x00000400 # Controls coherency of depth/stencil attachment writes
    transferRead = 0x00000800 # Controls coherency of transfer reads
    transferWrite = 0x00001000 # Controls coherency of transfer writes
    hostRead = 0x00002000 # Controls coherency of host reads
    hostWrite = 0x00004000 # Controls coherency of host writes
    memoryRead = 0x00008000 # Controls coherency of memory reads
    memoryWrite = 0x00010000 # Controls coherency of memory writes
    # Provided by VK_NV_device_generated_commands
    commandPreprocessReadNv = 0x00020000
    commandPreprocessWriteNv = 0x00040000
    # Provided by VK_EXT_blend_operation_advanced
    colorAttachmentReadNoncoherentExt = 0x00080000
    # Provided by VK_EXT_conditional_rendering
    conditionalRenderingReadExt = 0x00100000 # read access flag for reading conditional rendering predicate
    # Provided by VK_KHR_ray_tracing
    accelerationStructureReadKhr = 0x00200000
    accelerationStructureWriteKhr = 0x00400000
    # Provided by VK_NV_shading_rate_image
    shadingRateImageReadNv = 0x00800000
    # Provided by VK_EXT_fragment_density_map
    fragmentDensityMapReadExt = 0x01000000
    # Provided by VK_EXT_transform_feedback
    transformFeedbackWriteExt = 0x02000000
    transformFeedbackCounterReadExt = 0x04000000
    transformFeedbackCounterWriteExt = 0x08000000
    # Provided by VK_AMD_extension_25
    reserved28Khr = 0x10000000
    reserved29Khr = 0x20000000
    # Provided by VK_AMD_extension_24
    reserved30Khr = 0x40000000
  AccessFlags* = Flags[AccessFlagBits]
  AttachmentDescriptionFlagBits* {.vkFlagBits.} = enum
    mayAlias = 0x00000001 # The attachment may alias physical memory of another attachment in the same render pass
  AttachmentDescriptionFlags* = Flags[AttachmentDescriptionFlagBits]
  AttachmentLoadOp* {.vkEnum.} = enum
    load = 0
    clear = 1
    dontCare = 2
  AttachmentStoreOp* {.vkEnum.} = enum
    store = 0
    dontCare = 1
    # Provided by VK_QCOM_render_pass_store_ops
    noneQcom = 1000301000
  DependencyFlagBits* {.vkFlagBits.} = enum
    byRegion = 0x00000001 # Dependency is per pixel region
    # Provided by VK_VERSION_1_1
    viewLocal = 0x00000002
    deviceGroup = 0x00000004 # Dependency is across devices
  DependencyFlags* = Flags[DependencyFlagBits]
  FramebufferCreateFlagBits* {.vkFlagBits.} = enum
    # Provided by VK_VERSION_1_2
    imageless = 0x00000001
  FramebufferCreateFlags* = Flags[FramebufferCreateFlagBits]
  PipelineBindPoint* {.vkEnum.} = enum
    graphics = 0
    compute = 1
    # Provided by VK_KHR_ray_tracing
    rayTracingKhr = 1000165000
  RenderPassCreateFlagBits* {.vkFlagBits.} = enum
    # Provided by VK_KHR_extension_221
    reserved0Khr = 0x00000001
    # Provided by VK_QCOM_render_pass_transform
    transformQcom = 0x00000002
  RenderPassCreateFlags* = Flags[RenderPassCreateFlagBits]
  SubpassDescriptionFlagBits* {.vkFlagBits.} = enum
    # Provided by VK_NVX_multiview_per_view_attributes
    perViewAttributesNvx = 0x00000001
    perViewPositionXOnlyNvx = 0x00000002
    # Provided by VK_QCOM_render_pass_shader_resolve
    fragmentRegionQcom = 0x00000004
    shaderResolveQcom = 0x00000008
  SubpassDescriptionFlags* = Flags[SubpassDescriptionFlagBits]
  CommandPoolCreateFlagBits* {.vkFlagBits.} = enum
    transient = 0x00000001 # Command buffers have a short lifetime
    resetCommandBuffer = 0x00000002 # Command buffers may release their memory individually
    # Provided by VK_VERSION_1_1
    protected = 0x00000004 # Command buffers allocated from pool are protected command buffers
  CommandPoolCreateFlags* = Flags[CommandPoolCreateFlagBits]
  CommandPoolResetFlagBits* {.vkFlagBits.} = enum
    releaseResources = 0x00000001 # Release resources owned by the pool
  CommandPoolResetFlags* = Flags[CommandPoolResetFlagBits]
  CommandBufferLevel* {.vkEnum.} = enum
    primary = 0
    secondary = 1
  CommandBufferResetFlagBits* {.vkFlagBits.} = enum
    releaseResources = 0x00000001 # Release resources owned by the buffer
  CommandBufferResetFlags* = Flags[CommandBufferResetFlagBits]
  CommandBufferUsageFlagBits* {.vkFlagBits.} = enum
    oneTimeSubmit = 0x00000001
    renderPassContinue = 0x00000002
    simultaneousUse = 0x00000004 # Command buffer may be submitted/executed more than once simultaneously
  CommandBufferUsageFlags* = Flags[CommandBufferUsageFlagBits]
  QueryControlFlagBits* {.vkFlagBits.} = enum
    precise = 0x00000001 # Require precise results to be collected by the query
  QueryControlFlags* = Flags[QueryControlFlagBits]
  IndexType* {.vkEnum.} = enum
    uint16 = 0
    uint32 = 1
    # Provided by VK_KHR_ray_tracing
    noneKhr = 1000165000
    # Provided by VK_EXT_index_type_uint8
    uint8Ext = 1000265000
  StencilFaceFlagBits* {.vkFlagBits.} = enum
    front = 0x00000001 # Front face
    back = 0x00000002 # Back face
    frontAndBack = 0x00000003 # Front and back faces
  StencilFaceFlags* = Flags[StencilFaceFlagBits]
  SubpassContents* {.vkEnum.} = enum
    inline = 0
    secondaryCommandBuffers = 1
  # VERSION 1 1
  # -----------
  SubgroupFeatureFlags* = Flags[SubgroupFeatureFlagBits]
  SubgroupFeatureFlagBits* {.vkFlagBits.} = enum
    basic = 0x00000001 # Basic subgroup operations
    vote = 0x00000002 # Vote subgroup operations
    arithmetic = 0x00000004 # Arithmetic subgroup operations
    ballot = 0x00000008 # Ballot subgroup operations
    shuffle = 0x00000010 # Shuffle subgroup operations
    shuffleRelative = 0x00000020 # Shuffle relative subgroup operations
    clustered = 0x00000040 # Clustered subgroup operations
    quad = 0x00000080 # Quad subgroup operations
    # Provided by VK_NV_shader_subgroup_partitioned
    partitionedNv = 0x00000100
  PeerMemoryFeatureFlags* = Flags[PeerMemoryFeatureFlagBits]
  PeerMemoryFeatureFlagBits* {.vkFlagBits.} = enum
    copySrc = 0x00000001 # Can read with vkCmdCopy commands
    copyDst = 0x00000002 # Can write with vkCmdCopy commands
    genericSrc = 0x00000004 # Can read with any access type/command
    genericDst = 0x00000008 # Can write with and access type/command
  MemoryAllocateFlags* = Flags[MemoryAllocateFlagBits]
  MemoryAllocateFlagBits* {.vkFlagBits.} = enum
    deviceMask = 0x00000001 # Force allocation on specific devices
    # Provided by VK_VERSION_1_2
    deviceAddress = 0x00000002
    deviceAddressCaptureReplay = 0x00000004
  CommandPoolTrimFlags* = Flags[distinct UnusedEnum]
  PointClippingBehavior* {.vkEnum.} = enum
    allClipPlanes = 0
    userClipPlanesOnly = 1
  TessellationDomainOrigin* {.vkEnum.} = enum
    upperLeft = 0
    lowerLeft = 1
  SamplerYcbcrModelConversion* {.vkEnum.} = enum
    rgbIdentity = 0
    ycbcrIdentity = 1 # just range expansion
    ycbcr709 = 2 # aka HD YUV
    ycbcr601 = 3 # aka SD YUV
    ycbcr2020 = 4 # aka UHD YUV
  SamplerYcbcrRange* {.vkEnum.} = enum
    ituFull = 0 # Luma 0..1 maps to 0..255, chroma -0.5..0.5 to 1..255 (clamped)
    ituNarrow = 1 # Luma 0..1 maps to 16..235, chroma -0.5..0.5 to 16..240
  ChromaLocation* {.vkEnum.} = enum
    cositedEven = 0
    midpoint = 1
  DescriptorUpdateTemplateCreateFlags* = Flags[distinct UnusedEnum]
  DescriptorUpdateTemplateType* {.vkEnum.} = enum
    descriptorSet = 0 # Create descriptor update template for descriptor set updates
    # Provided by VK_KHR_push_descriptor
    pushDescriptorsKhr = 1 # Create descriptor update template for pushed descriptor updates
  ExternalMemoryHandleTypeFlags* = Flags[ExternalMemoryHandleTypeFlagBits]
  ExternalMemoryHandleTypeFlagBits* {.vkFlagBits.} = enum
    opaqueFd = 0x00000001
    opaqueWin32 = 0x00000002
    opaqueWin32Kmt = 0x00000004
    d3d11Texture = 0x00000008
    d3d11TextureKmt = 0x00000010
    d3d12Heap = 0x00000020
    d3d12Resource = 0x00000040
    # Provided by VK_EXT_external_memory_host
    hostAllocationExt = 0x00000080
    hostMappedForeignMemoryExt = 0x00000100
    # Provided by VK_EXT_external_memory_dma_buf
    dmaBufExt = 0x00000200
    # Provided by VK_ANDROID_external_memory_android_hardware_buffer
    androidHardwareBufferAndroid = 0x00000400
  ExternalMemoryFeatureFlags* = Flags[ExternalMemoryFeatureFlagBits]
  ExternalMemoryFeatureFlagBits* {.vkFlagBits.} = enum
    dedicatedOnly = 0x00000001
    exportable = 0x00000002
    importable = 0x00000004
  ExternalFenceHandleTypeFlags* = Flags[ExternalFenceHandleTypeFlagBits]
  ExternalFenceHandleTypeFlagBits* {.vkFlagBits.} = enum
    opaqueFd = 0x00000001
    opaqueWin32 = 0x00000002
    opaqueWin32Kmt = 0x00000004
    syncFd = 0x00000008
  ExternalFenceFeatureFlags* = Flags[ExternalFenceFeatureFlagBits]
  ExternalFenceFeatureFlagBits* {.vkFlagBits.} = enum
    exportable = 0x00000001
    importable = 0x00000002
  FenceImportFlags* = Flags[FenceImportFlagBits]
  FenceImportFlagBits* {.vkFlagBits.} = enum
    temporary = 0x00000001
  SemaphoreImportFlags* = Flags[SemaphoreImportFlagBits]
  SemaphoreImportFlagBits* {.vkFlagBits.} = enum
    temporary = 0x00000001
  ExternalSemaphoreHandleTypeFlags* = Flags[ExternalSemaphoreHandleTypeFlagBits]
  ExternalSemaphoreHandleTypeFlagBits* {.vkFlagBits.} = enum
    opaqueFd = 0x00000001
    opaqueWin32 = 0x00000002
    opaqueWin32Kmt = 0x00000004
    d3d12Fence = 0x00000008
    syncFd = 0x00000010
  ExternalSemaphoreFeatureFlags* = Flags[ExternalSemaphoreFeatureFlagBits]
  ExternalSemaphoreFeatureFlagBits* {.vkFlagBits.} = enum
    exportable = 0x00000001
    importable = 0x00000002
  # VERSION 1 2
  # -----------
  DriverId* {.vkEnum.} = enum
    amdProprietary = 1 # Advanced Micro Devices, Inc.
    amdOpenSource = 2 # Advanced Micro Devices, Inc.
    mesaRadv = 3 # Mesa open source project
    nvidiaProprietary = 4 # NVIDIA Corporation
    intelProprietaryWindows = 5 # Intel Corporation
    intelOpenSourceMesa = 6 # Intel Corporation
    imaginationProprietary = 7 # Imagination Technologies
    qualcommProprietary = 8 # Qualcomm Technologies, Inc.
    armProprietary = 9 # Arm Limited
    googleSwiftshader = 10 # Google LLC
    ggpProprietary = 11 # Google LLC
    broadcomProprietary = 12 # Broadcom Inc.
    mesaLlvmpipe = 13 # Mesa
    molten = 14 # MoltenVK
  ShaderFloatControlsIndependence* {.vkEnum.} = enum
    e32Only = 0
    all = 1
    none = 2
  DescriptorBindingFlagBits* {.vkFlagBits.} = enum
    updateAfterBind = 0x00000001
    updateUnusedWhilePending = 0x00000002
    partiallyBound = 0x00000004
    variableDescriptorCount = 0x00000008
  DescriptorBindingFlags* = Flags[DescriptorBindingFlagBits]
  ResolveModeFlagBits* {.vkFlagBits.} = enum
    none = 0
    sampleZero = 0x00000001
    average = 0x00000002
    min = 0x00000004
    max = 0x00000008
  ResolveModeFlags* = Flags[ResolveModeFlagBits]
  SamplerReductionMode* {.vkEnum.} = enum
    weightedAverage = 0
    min = 1
    max = 2
  SemaphoreType* {.vkEnum.} = enum
    binary = 0
    timeline = 1
  SemaphoreWaitFlagBits* {.vkFlagBits.} = enum
    any = 0x00000001
  SemaphoreWaitFlags* = Flags[SemaphoreWaitFlagBits]


ExternalSemaphoreHandleTypeFlagBits.defineAliases:
  d3d12Fence as d3d11Fence

StructureType.defineAliases:
  physicalDeviceVariablePointersFeatures as physicalDeviceVariablePointerFeatures
  physicalDeviceShaderDrawParametersFeatures as physicalDeviceShaderDrawParameterFeatures

StencilFaceFlagBits.defineAliases:
  frontAndBack as stencilFrontAndBack # Alias for backwards compatibility
